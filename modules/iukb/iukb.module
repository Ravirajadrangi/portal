<?php
// vim: filetype=php
// Author: Matthew Lewallen
// Contact: mlewalle [at] indiana edu -or- mithril293 [at] gmail com

/**
 * @file
 * This module provides several menu callbacks (all beginning with /kb/) and
 * an optional input filter that implement theming kb.iu.edu articles through
 * the local site's theme.
 */
define("IUKB_API_USER", "fgrid");
define("IUKB_API_KEY", "OV93R7JNO0");
define("IUKB_KB", "futuregrid");
define("IUKB_AUDIENCE", "fgrid");
define("IUKB_REST_URL", "https://remote.kb.iu.edu/REST/v0.2/");

/**
 * Sub: iukb_help
 * Purpose: Implementation of hook_help
 */

function iukb_help($section) {
	switch ($section) {
		case 'admin/help#iukb':
			return t('<p>The iukb module provides a menu callback to bring content from the IU KB and format it with the current site\'s theme.</p><p>There is also an input filter that will automaticall map a href links from kb.iu.edu to the local site\'s rendering of the page and for a convenience [iukb] link encoding.');
	}
}

/**
 * Sub: iukb_node_info
 * Purpose: Implementation of iukb_node_info
 */

function iukb_node_info() {
	return array(
		'iukb' => array(
			'name' => t('Knowledge base'),
			'module' => 'iukb',
			'description' => 'Represents a KnowledgeBase document.'
		)
	);
}

/**
 * Add a "refresh this document" button to the node edit
**/
function iukb_form_alter(&$form, &$form_state, $form_id) {
	if ($form_id == "iukb_node_form") {
		$form['buttons']['refresh'] = array(
			'#type' => 'submit',
			'#value' => 'Sync with Knowledge Base Version',
			'#weight' => -999,
			'#submit' => array('iukb_refresh_submit'),
		);	
	}
}

function iukb_refresh_submit($form, &$form_state) {
	$doc_info = iukb_get_kb_info($form['#node']->nid);
	iukb_admin_force_update_doc($doc_info->iukb_docid);
}

function iukb_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
	switch ($op) {
	case 'load':
		if ($kbinfo = iukb_get_kb_info($node->nid)) {
			$node->iukb_docid = $kbinfo->iukb_docid;
			$node->iukb_updated = $kbinfo->iukb_updated;
		}
		break;
	
	case 'insert':
		// insert new
		$values = array('updated_timestamp' => $node->iukb_updated, 'nid' => $node->nid, 'did' => $node->iukb_docid);
		drupal_write_record('iukb_doc_node', $values);
		break;
		
	case 'update':
		if ($kbinfo = iukb_get_kb_info($node->nid)) {
			if (strtotime($node->iukb_updated) > strtotime($kbinfo->iukb_updated)) {
				$values = array('updated_timestamp' => $node->iukb_updated, 'nid' => $node->nid);
				drupal_write_record('iukb_doc_node', $values, 'nid');
			}
		}
		break;
		
	case 'delete':
		db_query("DELETE FROM {iukb_doc_node} WHERE nid = %d", $node->nid);
		break;
	}
}

function iukb_menu() {

	// Initial search
	$items['kb'] = array(
		'title' => 'Knowledge Base Search',
		'page callback' => 'iukb_search_redirect',
		'access arguments' => array('access iukb'),
		'type' => MENU_CALLBACK,
	);
	
	$items['kb/index'] = array(
		'title' => 'Knowledge Base Document Index',
		'page callback' => 'iukb_document_list',
		'access arguments' => array('access iukb'),
		'type' => MENU_CALLBACK,
	);
	
	/**
	 * This menu endpoint is to support KB docs that are
	 * not in the FG kb, and so don't get indexed locally.
	 */
	$items['kb/document/%'] = array(
		'page callback' => 'iukb_document_view',
		'page arguments' => array(2),
		'access arguments' => array('access iukb'),
		'type' => MENU_CALLBACK,
	);
	
	// admin
	$items['admin/settings/iukb'] = array(
		'title' => 'IU Knowledge Base Administration',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('iukb_adminform'),
		'access arguments' => array('administer iukb'),
		'type' => MENU_NORMAL_ITEM,
	);

	// force update confirmation page
	$items['admin/settings/iukb/force_update'] = array(
		'title' => 'Force Update IUKB Documents',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('iukb_refresh_confirm'),
		'access arguments' => array('administer iukb'),
		'type' => MENU_CALLBACK,
	);

	return $items;
}

/**
 * Sub: iukb_perm
 * Purpose: Implements hook_perm
 * Note: administer iukb isn't yet used
 */

function iukb_perm() {
  return array('administer iukb', 'access iukb');
}

/**
 * Sub: iukb_filter_tips
 * Purpose: implements hook_filter_tips, but I'm not sure what it does yet (:
 */

function iukb_filter_tips($delta, $format, $long = FALSE) {
	switch ($delta) {
		case 0:
			if ($long) return t(
				'This filter searches node content for &lt;a&lt; links to ' .
				'kb.iu.edu and rewrites them to local /kb/ entries which ' .
				'display the same content. It can also replace quick kb links ' .
				'in the form [iukb: XXXX] with links to the local kb page.'
			);
	    	else return t(
				'Rewrites links to kb.iu.edu links to local links and expands kb links [iukb:XXXX] with a ' .
				'link to the document id XXXX.'
			);
			break;
	}
}

/**
 * Sub: iukb_filter
 * Purpose: workhorse for replacing URLs and [iukb]
 */

function iukb_filter($op, $delta = 0, $format = -1, $text = '') {
	if ($op == 'list') return array(
		0 => t('IUKB Link Translation'),
	);
	switch ($delta) { // delta is the number of the filter we're applying
		case 0: // http://kb.iu.edu/data/XXXX.html -> http://localsite/kb/XXXX
			switch ($op) {
				case 'description':
					return t(
						'Either replace quick kb link formats [iukb:XXXX] or ' .
						'replace actual &lt;a&gt; links to kb.iu.edu in node ' .
						'content.'
					);

				case 'prepare':
					return $text;

				case 'process':
					return _iukb_filter($text, $format);

				case 'settings':
					$form['iukb'] = array(
						'#type' => 'fieldset',
						'#title' => t('IUKB Filter'),
						'#collapsible' => true, '#collapsed' => false,
					);
					$form['iukb']['iukb_encode_kb_link_' . $format] =
						array(
							'#type' => 'radios',
							'#title' =>
								t('Encode &lt;a&gt; links to kb.iu.edu'),
							'#default_value' => variable_get
								('iukb_encode_kb_link_' . $format, 0),
							'#options' => array(
								0 => t('Do not encode links.'),
								1 => t('Encode links to kb.iu.edu to a local page.'),
							),
							'#description' => t(
							  'Whether or not this filter should replace ' .
							  '&lt;a href="http://kb.iu.edu/data/XXXX.html"&gt; links with '.
							  '&lt;a href="http://mysite/kb/XXXX"&gt;.'
							),
						);
					$form['iukb']['iukb_encode_iukb_' . $format] =
						array(
							'#type' => 'radios',
							'#title' => t('Encode [iukb:XXXX]'),
							'#default_value' => variable_get
								  ('iukb_encode_iukb_' . $format, 0),
							'#options' => array(
								0 => t('Do not encode links.'),
								1 => t('Encode quicklink [iukb:XXXX] to a local page.'),
							),
							'#description' => t(
								'Whether or not this filter should replace ' .
								'[iukb:XXXX] with ' .
								'&lt;a href="http://mysite/kb/XXXX"&gt;.'
							),
						);
					return $form;
			}
			break;
	}
}

/**
	iukb_create_update_node is used to create and update local
	knowledgebase nodes

	NOTE: the timestamp MUST BE IN UNIX TIME or else it won't save properly!!
	(see: difference between datetime and int)
**/

function iukb_create_update_node($kbDocId, $kbDocTimestamp, $nodeId = NULL) {
		
		if ($nodeId) {
			$iukb_node = node_load($nodeId);
		} else {
			$iukb_node = new stdClass();
			$iukb_node->type = 'iukb';
			$iukb_node->uid = 1;
			$iukb_node->promote = 1;
			$iukb_node->comment = variable_get('comment_iukb', COMMENT_NODE_READ_WRITE);
		}
		$iukb_node->status = iukb_get_document_published($kbDocId);
		$iukb_node->iukb_docid = $kbDocId;
		$iukb_node->iukb_updated = $kbDocTimestamp;

		$iukb_node->title = iukb_get_title($kbDocId);
		$document = iukb_get_document($kbDocId);
		$html = iukb_kbml_to_html($document);
		
		$iukb_node->body = $html;
		$iukb_node->teaser = node_teaser($html);
		$iukb_node->revision = 1;

		node_save($iukb_node);

		return $iukb_node->nid;
}

// The REST functions don't provide teaser text so we're going to create some!
function iukb_create_teaser($body, $limit) {
	$teaser = strip_tags($body);
	if (strlen($teaser) > $limit) {
		$word_array = array_keys(str_word_count($teaser, 2));
		$teaser = substr($teaser, 0, $word_array[$limit]);
	}
	//error_log("Teaser: " . $teaser);
	return $teaser . '...';
}

function iukb_kbml_to_html($kbml) {
	// remove fg-credit
	$kbml = preg_replace('/<boiler src="fg-credit">(.*)<\/boiler>/s', '', $kbml);
	$kbml = preg_replace('/<\?xml.*\?>/', '', $kbml);

	$doc = simplexml_load_string($kbml);
	$xsl = new DomDocument;
	$xsl->load(drupal_get_path('module', 'iukb') . '/XSL/kbdoc.xsl');
	$xp = new XsltProcessor();
	$xp->importStylesheet($xsl);
	$html = $xp->transformToXml($doc);
	$html = preg_replace('/<\?xml.*\?>/', '', $html);
	return $html;
}

// Our cron job pulls all the KnowledgeBase doc ids and checks to make sure our local nodes are up-to-date
function iukb_cron() {
	foreach (iukb_get_updated_documents() as $docId) {
		$doc_info = iukb_get_kb_info(iukb_get_node_id($docId));
		$nodeId = iukb_create_update_node($docId, $doc_info->iukb_updated, $doc_info->nid);	
	}

	foreach (iukb_get_new_documents() as $docId) {
		$iukb_updated = iukb_get_last_updated($docId);
		$nodeId = iukb_create_update_node($docId, strtotime($updated_datetime));
	}
}

function iukb_admin_force_update_all() {
	$docIDs = iukb_get_documents();
	foreach ($docIDs as $docId) {
		$iukb_updated = iukb_get_last_updated($docId);
		if ($nid = iukb_get_node_id($docId)) {
			iukb_create_update_node($docId, strtotime($iukb_updated), $nid);
		} else {
			iukb_create_update_node($docId, strtotime($iukb_updated));
		}
	}
}

function iukb_admin_force_update_doc($docId) {
	if ($doc = iukb_get_document($docId)) {
		$iukb_updated = iukb_get_last_updated($docId);
		if ($nid = iukb_get_node_id($docId)) {
			iukb_create_update_node($docId, strtotime($iukb_updated), $nid);
		} else {
			iukb_create_update_node($docId, strtotime($iukb_updated));
		}
	}
}

function iukb_get_kb_info($nid) {
	return db_fetch_object(db_query("SELECT nid, did as iukb_docid, updated_timestamp as iukb_updated FROM {iukb_doc_node} WHERE nid = %d", $nid));
}

function iukb_get_node_id($kbDocId) {
	return db_result(db_query("SELECT nid FROM {iukb_doc_node} WHERE did = '%s'", $kbDocId));
}

function iukb_get_documents() {
	$request = IUKB_REST_URL . IUKB_KB . '/documents';
	$ch = curl_init($request);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
	curl_setopt($ch, CURLOPT_USERPWD, IUKB_API_USER.':'.IUKB_API_KEY);
	$response = curl_exec($ch);
	$xmlObj = simplexml_load_string($response);
	$docIds = array();
	foreach ($xmlObj->document as $doc) {
		$docIds[] = (string) $doc->id;
	}
	return $docIds;
}

function iukb_get_document($docId) {
	$request = IUKB_REST_URL . IUKB_KB . '/document/' . IUKB_AUDIENCE . '/' . $docId;
	$ch = curl_init($request);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
	curl_setopt($ch, CURLOPT_USERPWD, IUKB_API_USER.':'.IUKB_API_KEY);
	$response = curl_exec($ch);
	//error_log($response);
	return $response;
}

function iukb_get_document_preview($docId) {
	$request = IUKB_REST_URL . IUKB_KB . '/document/preview/' . IUKB_AUDIENCE . '/' . $docId;
	$ch = curl_init($request);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
	curl_setopt($ch, CURLOPT_USERPWD, IUKB_API_USER.':'.IUKB_API_KEY);
	$response = curl_exec($ch);
}

function iukb_get_document_published($docId) {
	$response = iukb_get_document($docId);
	if (preg_match('/<visibility>visible<\/visibility>/', $response)) {
		return TRUE;
	} else {
		return FALSE;
	}
}

function iukb_get_last_updated($docId) {
	$request = IUKB_REST_URL . IUKB_KB . '/document/' . IUKB_AUDIENCE . '/' . $docId;
	$ch = curl_init($request);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
	curl_setopt($ch, CURLOPT_HEADER, TRUE); // header will be at output
	curl_setopt($ch, CURLOPT_NOBODY, TRUE); // header will be at output
	curl_setopt($ch, CURLOPT_USERPWD, IUKB_API_USER.':'.IUKB_API_KEY);
	$response = curl_exec($ch);
	if (preg_match('/X-kb-lastmodified: (.*)/', $response, $matches)) {
		return $matches[1];
	}
}

/** returns an ARRAY of docids that correspond to documents not yet in our db **/
function iukb_get_new_documents() {
	$new_docs = array();
	$docIDs = iukb_get_documents();
	foreach ($docIDs as $docId) {
		$query = db_query("SELECT nid FROM {iukb_doc_node} WHERE did = '%s'",array($docId));
		$doc_node = db_fetch_object($query);
		if (!isset($doc_node->nid)) {
			$new_docs[] = $docId;
		}
	}

	return $new_docs;
}

/** returns an ARRAY of docids that correspond to documents that have updates available **/
function iukb_check_updated_documents() {
	$result = db_query("SELECT did, updated_timestamp, nid FROM {iukb_doc_node}");
	while ($docInfo = db_fetch_object($result)) {
		$last_updated = iukb_get_last_updated($docInfo->did);
		
		if ($docInfo->updated_timestamp < strtotime($last_updated)) {	
			$docInfo->iukb_timestamp = strtotime($last_updated);
			drupal_write_record("iukb_doc_node", $docInfo, array($docInfo->nid, $docInfo->did));
		}
	}
}

function iukb_get_updated_documents() {
	$result = db_query("SELECT did, nid FROM {iukb_doc_node} WHERE iukb_timestamp > updated_timestamp");

	$docs_with_updates = array();

	while ($doc = db_fetch_object($result)) {
		$docs_with_updates[] = $doc;
	}

	return $docs_with_updates;
}

function iukb_get_title($docId) {
	$request = IUKB_REST_URL . IUKB_KB . '/document/' . IUKB_AUDIENCE . '/' . $docId;
	$ch = curl_init($request);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
	curl_setopt($ch, CURLOPT_HEADER, TRUE); // header will be at output
	curl_setopt($ch, CURLOPT_NOBODY, TRUE); // header will be at output
	curl_setopt($ch, CURLOPT_USERPWD, IUKB_API_USER.':'.IUKB_API_KEY);
	$response = curl_exec($ch);
	if (preg_match('/X-kb-titles-'.IUKB_AUDIENCE.': (.*)/', $response, $matches)) {
		return $matches[1];
	} else if (preg_match('/X-kb-titles-default: (.*)/', $response, $matches)) {
		return $matches[1];
	}
}

function iukb_get_title_alt($docId) {
	$request = IUKB_REST_URL . IUKB_KB . '/document/' . IUKB_AUDIENCE . '/' . $docId;
	$headers = get_headers($request);
	error_log(print_r($headers,1));
	if (preg_match('/X-kb-titles-'.IUKB_AUDIENCE.': (.*)/', $headers, $matches)) {
		return $matches[1];
	} else if (preg_match('/X-kb-titles-default: (.*)/', $headers, $matches)) {
		return $matches[1];
	}
}

function iukb_search_redirect() {
	$query = array();
	foreach ($_GET as $key => $val) {
		if ($key == 'q') {
			continue;
		}
		else if ($key == 'search') {
			$query['keys'] = $val;
		}
		else {
			$query[$key] = $val;
		}
	}
	drupal_goto('search/iukb', $query);
}

function iukb_form(&$node, $form_state) {
	$form['title'] = array(
    '#type' => 'textfield', 
    '#title' => check_plain($type->title_label), 
    '#required' => TRUE, 
    '#default_value' => $node->title,
  );

  $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
	
	return $form;
}

function _iukb_filter($text, $format) {
	$patterns = array();
	$replacements = array();
	if (variable_get('iukb_encode_kb_link_' . $format, 0)) {
		$patterns[] = '/href[\s\v]*=[\s\v]*[\'"]https?:\/\/kb.iu.edu\/data\/([a-z]{4})\.html#?([^?\'"]*)[\'"]/ise';
		$replacements[] = "'href=\"' . url('node/'.iukb_get_node_id($1), array('fragment' => '$2')) . '\"'";
	}
	
	if (variable_get('iukb_encode_iukb_' . $format, 0)) {
		$patterns[] = '/\[\s*iukb\s*\:\s*([a-z]{4})\s*\]/ie'; // [iukb:xxxx]
		$replacements[] = "l(iukb_get_title('$1'), 'node/'.iukb_get_node_id($1), array('attributes' => array('class' => 'kb-link')));";
	}
	return preg_replace($patterns, $replacements, $text);
}

function iukb_form_search_form_alter(&$form, &$form_state) {
	if ($form['module']['#value'] == 'iukb') {
		$form['basic']['#title'] = t('Search the Knowledge Base');
	}
}

function iukb_preprocess_search_result(&$vars) {
	if ($vars['result']['node']->type == 'iukb') {
		$node = $vars['result']['node'];
		$info = array();
		$info['type'] = $vars['info_split']['type'];
		$info['date'] = date('Y-m-d', strtotime($node->iukb_updated));
		$vars['info_split'] = $info;
		$vars['info'] = implode(" - ", $info);
	}
}

function iukb_token_list($type = 'all') {
	$tokens = array();
	if ($type == 'iukb' || $type == 'node' || $type == 'all') {
		$tokens['IUKB']['kb-doc-id'] = t('The IUKB Document ID for the knowledge base item.');
	}
	return $tokens;
}

function iukb_token_values($type, $object = NULL, $options = array()) {
  $values = array();
  if (($type == 'IUKB' || $type == 'node') && !empty($object)) {
  	$kbInfo = iukb_get_kb_info($object->nid);
  	$values['kb-doc-id'] = $kbInfo->iukb_docid;
  }
  return $values;
}

function iukb_search($op = 'search', $keys = NULL) {
	switch ($op) {
		case 'name':
			return t('Knowledge base');
		case 'search':
			$find = do_search($keys, 'node', 'INNER JOIN {node} n ON n.nid = i.sid ', 'n.type = \'iukb\'');
			// Load results.
      $results = array();
      foreach ($find as $item) {
        // Build the node body.
        $node = node_load($item->sid);
        $node->build_mode = NODE_BUILD_SEARCH_RESULT;
        $node = node_build_content($node, FALSE, FALSE);
        $node->body = drupal_render($node->content);

        // Fetch comments for snippet.
        if (module_exists('comment')) {
          $node->body .= comment_nodeapi($node, 'update index');
        }
        // Fetch terms for snippet.
        if (module_exists('taxonomy')) {
          $node->body .= taxonomy_nodeapi($node, 'update index');
        }
				
        $results[] = array(
          'link' => url('node/' . $item->sid, array('absolute' => TRUE)), 
          'type' => check_plain(node_get_types('name', $node)), 
          'title' => $node->title, 
          'date' => strtotime($node->iukb_updated), 
          'node' => $node,
          'score' => $item->score, 
          'snippet' => search_excerpt($keys, $node->body),
        );
      }			
			return $results;
	}
}

function iukb_document_list() {
	$documents = array();
	$result = db_query("SELECT * FROM {node} WHERE type = '%s'", 'iukb');
	while ($node = db_fetch_object($result)) {
		$documents[] = l($node->title, "node/$node->nid");
	}
	return theme('item_list', $documents);
}

function iukb_document_view($docId) {
	drupal_set_title(iukb_get_title($docId));
	$output = iukb_kbml_to_html(iukb_get_document($docId));
	
	$links = array(
		'kb-external-info' => array(
			'title' => '<em>'.t('This document is outside of the FutureGrid knowledge base.').'</em>',
			'html' => TRUE,
		),
		'kb-external' => array(
			'href' => "http://kb.iu.edu/data/$docId.html",
			'title' => t('View this document on the IU KB'),
		),
	);
	return $output . theme('links', $links, array('class' => 'links'));
}

function iukb_adminform() {

	$output = "<h3>Documents with Available Updates<h3>";
	$update_count = 0;
	$output .= "<table>";

	foreach (iukb_get_updated_documents() as $doc) {
		$node = node_load($doc->nid);	
		$output .= "<tr><td>" . l($node->title, "node/" . $node->nid) . "</td></tr>";
		$update_count++;
	}


	$output .= "</table>";

	if ($update_count > 0) {
		$form['available_updates'] = array(
			'#type' => 'markup',
			'#value' => $output,
		);
	}	

	$form['check_updates'] = array(
		'#type' => 'submit',
		'#value' => t('Check for Updates of IUKB Documents'),
		'#submit' => array('iukb_check_updates'),
	);

	$form['force_refresh'] = array(
		'#type' => 'submit',
		'#value' => t('Force Refresh Now'),
		'#submit' => array('iukb_goto_refresh'),
		'#prefix' => '<div><h3>Force Refresh of all IUKB Documents</h3>',
		'#suffix' => '<p>Please note this process can take several minutes. This will overwrite all local changes.</p></div>',
	);

	$form['get_new'] = array(
		'#type' => 'submit',
		'#value' => t('Check Now'),
		'#submit' => array('iukb_adminform_getnew_submit'),
		'#prefix' => '<div><h3>Check for new IUKB Documents</h3>',
		'#suffix' => '<p>Please note this process can take several minutes.</p></div>',
	);

	return $form;
}

function iukb_check_updates($form, &$form_state) {
	iukb_check_updated_documents();
}

function iukb_goto_refresh($form, &$form_state) {
	drupal_goto('admin/settings/iukb/force_update');
}

function iukb_adminform_getnew_submit($form, &$form_state) {
	$doc_count = 0;
	foreach (iukb_get_new_documents() as $docId) {
		$last_updated = iukb_get_last_updated($docId);
		iukb_create_update_node($docId, strtotime($last_updated));
		$doc_count++;
	}
	$document = $doc_count == 1 ? "document" : "documents";
	drupal_set_message(t($doc_count . " new IUKB " . $document . " have been pulled."));
}

function iukb_refresh_confirm(&$form_state) {
	$form = array(
		'#type' => 'value',
		'#value' => '1',
	);

	return confirm_form($form, t("Force Refresh will wipe out ALL local changes. Are you sure?"), "admin/settings/iukb", "", t("Yes"), t("No"));
}

function iukb_refresh_confirm_submit($form, &$form_state) {
	if ($form_state['values']['confirm']) {
		iukb_admin_force_update_all();
		drupal_set_message("Documents have been refreshed.");
	}

	drupal_goto("admin/settings/iukb");
}


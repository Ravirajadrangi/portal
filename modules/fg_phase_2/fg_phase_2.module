<?php
/**
 * Author: Matthew R Hanlon (mrhanlon), TACC
 */
 
function fg_phase_2_init() {
// 	if (module_exists('homebox')) {
// 		module_load_include('inc', 'fg_phase_2', 'fg_phase_2.homebox');
// 	}
// 	module_load_include('inc', 'fg_phase_2', 'fg_phase_2.inca');
}
function fg_phase_2_perm() {
	return array(
		'view own tickets',
		'submit tickets',
		'administer fg tickets',
		'manage portal accounts',
		'service project join requests',
		);
}

function fg_phase_2_menu() {
	$items = array();
	
	$items['fg/tickets'] = array(
		'title' => 'FutureGrid tickets',
		'page callback' => 'fg_phase_2_tickets',
		'access arguments' => array('access content'),
		'type' => MENU_NORMAL_ITEM,
		);
		
	$items['fg/tickets/my'] = array(
		'title' => 'My tickets',
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'access arguments' => array('access content'),
		);

	$items['fg/tickets/my/ajax/%'] = array(
		'title' => 'My tickets',
		'type' => MENU_CALLBACK,
		'access arguments' => array('view own tickets'),
		'page callback' => 'fg_phase_2_ticket_view',
		'page arguments' => array(4,3),
		);

	$items['fg/tickets/my/load-row-ajax/%'] = array(
		'title' => 'My tickets',
		'type' => MENU_CALLBACK,
		'access arguments' => array('view own tickets'),
		'page callback' => 'fg_phase_2_ticket_row',
		'page arguments' => array(4),
		);
	
	$items['fg/tickets/submit'] = array(
		'title' => 'Submit a ticket',
		'type' => MENU_LOCAL_TASK,
		'access arguments' => array('access content'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('fg_phase_2_ticket_form'),
		);
	
	$items['fg/tickets/load-projects'] = array(
		'title' => 'Load projects ajax',
		'type' => MENU_CALLBACK,
		'access arguments' => array('access content'),
		'page callback' => 'fg_phase_2_ticket_form_load_projects',
		);
	
	$items['fg/tickets/submit/result'] = array(
		'title' => 'Your ticket submission',
		'type' => MENU_CALLBACK,
		'access arguments' => array('access content'),
		'page callback' => 'fg_phase_2_ticket_form_submit_result',
		);

 	$items['admin/settings/fg-tickets'] = array(
 		'access arguments' => array('administer fg tickets'),
 		'page callback' => 'drupal_get_form',
 		'page arguments' => array('fg_phase_2_ticket_admin_form'),
 		'title' => 'FutureGrid tickets',
 		'description' => t('Administer FutureGrid tickets settings.'),
 		);

 	$items['user/%user/fg-account'] = array(
 		'access callback' => 'fg_phase_2_manage_account_access',
 		'access arguments' => array(1),
 		'page callback' => 'fg_phase_2_manage_account',
 		'page arguments' => array(1),
 		'title' => 'Portal Account',
		'type' => MENU_LOCAL_TASK,
		'weight' => -10,
 		);

 	$items['manage-my-portal-account'] = array(
 		'access callback' => 'fg_phase_2_manage_account_redirect_access',
 		'page callback' => 'fg_phase_2_manage_account_redirect',
 		'title' => 'Portal Account',
 		);
 	
//  	$items['fg/inca/test/%/%'] = array(
//  		'page callback' => 'fg_phase_2_get_inca_test',
//  		'page arguments' => array(3,4),
//  		'access arguments' => array('access content'),
// 		'type' => MENU_CALLBACK,
//  		);
 	
 	$items['node/%node/project-admin'] = array(
 		'title' => 'Project Admin',
 		'page callback' => 'fg_phase_2_fg_projects_admin',
 		'page arguments' => array(1),
 		'access callback' => 'fg_phase_2_fg_projects_admin_access',
 		'access arguments' => array(1),
 		'type' => MENU_LOCAL_TASK,
 		'weight' => 20,
 	);
 	
 	$items['node/%node/join-project'] = array(
 		'title callback' => 'fg_phase_2_fg_projects_join_title',
 		'title arguments' => array(1),
 		'page callback' => 'drupal_get_form',
 		'page arguments' => array('fg_phase_2_fg_projects_join_form', 1),
 		'access callback' => 'fg_phase_2_fg_projects_join_access',
 		'access arguments' => array(1),
 		'type' => MENU_CALLBACK,
 	);
 	
 	$items['node/%node/join-requests'] = array(
 		'title' => 'Project Join Requests',
 		'page callback' => 'drupal_get_form',
 		'page arguments' => array('fg_phase_2_fg_projects_service_join_request_form', 1),
 		'access callback' => 'fg_phase_2_fg_projects_service_join_request_access',
 		'access arguments' => array(1),
 		'type' => MENU_LOCAL_TASK,
 		'weight' => 21,
 	);
	
	return $items;
}

function fg_phase_2_menu_alter(&$items) {
	$items['user/%user/view']['weight'] = -20;
}

// function fg_phase_2_block($op = 'list', $delta = 0, $options = array()) {
// 	switch ($op) {
// 		case 'list':
// 			$blocks = array();
// 			$blocks[] = array('info' => 'INCA: Cloud status');
// 			return $blocks;
// 		
// 		case 'view':
// 			switch ($delta) {
// 				case 0:
// 					module_load_include('inc', 'fg_phase_2','fg_phase_2.blocks');
// 					return fg_phase_2_inca_status_block($options);
// 			}
// 	}
// }

function fg_phase_2_tickets() {
	global $user;
	
	if (! user_access('view own tickets')) {
		if (user_access('submit tickets')) {
			drupal_set_message(t('You must !login to view your tickets.', array('!login' => l(t('log in'),'user/login',array('query'=>drupal_get_destination())))));
			drupal_goto('fg/tickets/submit');
		} else {
			return drupal_access_denied();
		}
	}
	
	jquery_ui_add(array('ui.core','ui.draggable','ui.resizable','ui.dialog'));
	drupal_add_js(libraries_get_path('datatables').'/media/js/jquery.dataTables.js');
	drupal_add_css(libraries_get_path('datatables').'/media/css/demo_table_jui.css');
	drupal_add_css(libraries_get_path('jquery_ui_smoothness').'/jquery-ui-1.7.3.custom.css');
	drupal_add_js(drupal_get_path('module','fg_phase_2').'/js/fg_tickets.js');
	drupal_add_css(drupal_get_path('module','fg_phase_2').'/css/fg_tickets.css');
	
	$tix = fg_rt_get_tickets_by_requestor($user->mail);
	
	return theme('fg_my_tickets', $tix);
}

function fg_phase_2_ticket_row($tid) {
	$status = fg_rt_get_ticket_by_id($tid);
	$resp = new stdClass();
	$resp->data = $status;
	$resp->tid = $tid;
	$resp->viewUrl = l($tid,"fg/tickets/my/ajax/$tid",array("attributes"=>array("class"=>"ticket-view-link")));
	return drupal_json($resp);
	exit;
}

function fg_phase_2_ticket_view($tid, $ajax = '') {

	$status = fg_rt_get_ticket_by_id($tid);
	$history = fg_rt_get_ticket_history_by_id($tid);	
	
	
	if ($ajax == 'ajax') {
		$resp = new stdClass();
		$resp->title = t('Ticket History') . ' - ' . $status["Subject"];
		$resp->view = theme('table', array(t('Description'), t('Content'), t('Creator'), t('Timestamp')), $history, array('class'=>'ticket-history'));
		return drupal_json($resp);
		exit;
	} else {
		$output = theme('fg_ticket_view', $status, theme('table', array(t('Description'), t('Content'), t('Creator'), t('Timestamp')), $history, array('class'=>'ticket-history')));
		return $output;
	}
}

function theme_fg_ticket_form($form) {
	drupal_add_css(drupal_get_path('module', 'fg_phase_2').'/css/fg_tickets.css');
	return drupal_render($form);
}

function fg_phase_2_form_alter(&$form, &$form_state, $form_id) {
	if ($form_id == 'user_register') {
		array_unshift($form['#validate'], 'fg_phase_2_user_register_email_validate');
	}
}

function fg_phase_2_user_register_email_validate($form, &$form_state) {
	if ($form_state['values']['mail'] &&
			$form_state['values']['profile_email'] &&
			$form_state['values']['mail'] != $form_state['values']['profile_email']
		)
	{
		form_set_error('mail', t('The emails provided do not match.  Please check you entry.'));
		form_set_error('profile_email', ' ');
		array_pop($_SESSION['messages']['error']); // get rid of empty error
	}
}

function fg_phase_2_ticket_form(&$form_state) {
	$form = array(
		'#cache' => TRUE,
		'#action' => url('fg/tickets/submit')
	);
	$form['#theme'][] = 'fg_ticket_form';
	
	global $user;
	if ($user->uid < 1) {
		$form['first_name'] = array(
			'#type' => 'textfield',
			'#title' => t('First name'),
			'#size' => 30,
			'#required' => TRUE,
			'#prefix' => '<div class="name-wrapper">',
			);
		
		$form['last_name'] = array(
			'#type' => 'textfield',
			'#title' => t('Last name'),
			'#size' => 30,
			'#required' => TRUE,
			'#suffix' => '</div>',
			);
		
		$form['email'] = array(
			'#type' => 'textfield',
			'#title' => t('Email address'),
			'#element_validate' => array('fg_phase_2_ticket_admin_email_validate'),
			'#required' => TRUE,
			);
	}
	
	$form['subject'] = array(
		'#type' => 'textfield',
		'#title' => t('Subject'),
		'#description' => t('The nature of your ticket'),
		'#required' => TRUE,
		);
	
	$project_options = array('' => t('Choose project'));
	
	
	$form['project_number_wrapper'] = array(
		'#prefix' => '<div id="project-number-wrapper" class="clearfix">',
		'#suffix' => '</div>',
	);
	
	if ($user->uid) {
		$list_type = $form_state['values']['project_list_type'] ? $form_state['values']['project_list_type'] : 'my-projects';
		if ($list_type == 'my-projects') {
			$sql = <<<SQL
SELECT node.nid, node.title, content_type_fg_projects.field_projectid_value
FROM {node} JOIN {content_type_fg_projects} ON node.nid = content_type_fg_projects.nid
JOIN {content_field_project_members} ON content_field_project_members.nid = node.nid
WHERE content_field_project_members.field_project_members_uid = %d
OR content_type_fg_projects.field_project_lead_uid = %d
OR content_type_fg_projects.field_project_manager_uid = %d
ORDER BY abs(content_type_fg_projects.field_projectid_value)
SQL;
			$args = array($user->uid, $user->uid, $user->uid);
		} else {
			$sql = <<<SQL
SELECT node.nid, node.title, content_type_fg_projects.field_projectid_value
FROM {node} JOIN {content_type_fg_projects} ON node.nid = content_type_fg_projects.nid
ORDER BY abs(content_type_fg_projects.field_projectid_value)
SQL;
			$args = array();
		}
			
		$results = db_query($sql,$args);
		while ($r = db_fetch_object($results)) {
			$project_options[$r->nid] = $r->field_projectid_value . ' - ' . $r->title;
		}
		
		$form['project_number_wrapper']['project_list_type'] = array(
			'#type' => 'value',
			'#value' => $list_type,
		);
		
		$form['project_number_wrapper']['project_number'] = array(
			'#type' => 'select',
			'#options' => $project_options,
			'#title' => t('Project'),
			'#attributes' => array('class'=>'project-number-field'),
		);
		
		$form['project_number_wrapper']['toggle_projects'] = array(
			'#type' => 'button',
			'#value' => $list_type == 'my-projects' ? t('Show all projects') : t('Show only my projects'),
			'#ahah' => array(
				'path' => 'fg/tickets/load-projects',
				'wrapper' => 'project-number-wrapper',
			),
			'#prefix' => '<div id="edit-toggle-projects-wrapper">',
			'#suffix' => '</div>',
		);
		
		$form['project_number_description'] = array(
			'#value' => t('Please select the project that this ticket pertains to.  You can find your projects on the !myprojects page or all projects on the !allprojects page.',
					array(
						'!myprojects' => l(t('My Portal Account'), 'manage-my-portal-account', array('attributes' => array('target'=>'_blank'))),
						'!allprojects' => l(t('Projects'), 'projects', array('attributes'=>array('target'=>'_blank'))),
					)),
			'#prefix' => '<div class="form-item clearfix" style="margin-top: 0;"><div class="description" style="float:left">',
			'#suffix' => '</div></div>',
		);
	} else {
		$sql = <<<SQL
SELECT node.nid, node.title, content_type_fg_projects.field_projectid_value
FROM {node} JOIN {content_type_fg_projects} ON node.nid = content_type_fg_projects.nid
ORDER BY abs(content_type_fg_projects.field_projectid_value)
SQL;
		$results = db_query($sql);
		while ($r = db_fetch_object($results)) {
			$project_options[$r->nid] = $r->field_projectid_value . ' - ' . $r->title;
		}
		$form['project_number_wrapper']['project_number'] = array(
			'#type' => 'select',
			'#options' => $project_options,
			'#title' => t('Project'),
			'#description' =>
				t('Please select the project that this ticket pertains to.  You can find the list of projects on the !allprojects page.',
					array(
						'!allprojects' => l(t('Projects'), 'projects', array('attributes'=>array('target'=>'_blank'))),
					)),
			'#attributes' => array('class'=>'project-number-field'),
			);
	}
	
	$form['problem_category_wrapper'] = array(
		'#prefix' => '<div class="problem-category-wrapper">',
		'#suffix' => '</div>',
		);
		
	$form['problem_category_wrapper']['problem_category'] = array(
		'#type' => 'checkboxes',
		'#title' => t('Problem category'),
		'#description' => t('Please indicate a category for this issue.'),
		'#options' => array(
			'eucalyptus' => t('Eucalyptus'),
			'nimbus' => t('Nimbus'),
			'hpc' => t('HPC'),
			'ssh-keys' => t('SSH keys'),
			'portal' => t('Portal'),
			'portal-account' => t('Portal account'),
			'unicore' => t('Unicore'),
			'genesis-ii' => t('Genesis II'),
			'network' => t('Network'),
			'other' => t('Other'),
			),
		'#required' => TRUE,
		'#prefix' => '<div class="problem-category">',
		'#suffix' => '</div>',
		);
	
	$form['problem_category_wrapper']['problem_category_other'] = array(
		'#type' => 'textfield',
		'#title' => t('Other'),
		'#description' => t('If you selected "Other", please describe it here.'),
		'#prefix' => '<div class="problem-category-other">',
		'#suffix' => '</div>',
		);
	
	$form['summary'] = array(
		'#type' => 'textarea',
		'#title' => t('Summary'),
		'#description' => t('Provide a summary of your problem or issue'),
		'#rows' => 10,
		'#required' => TRUE,
		);
	
	$form['#attributes'] = array('enctype' => "multipart/form-data");
	$form['attachment'] = array(
		'#type' => 'file',
		'#title' => t('Attach a file to this ticket'),
		'#description' => t('Attach a file to the ticket, such as sample code or a test case to reproduce the problem or a screen shot.'),
		);
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Submit ticket'),
		);
	
	return $form;
}

function fg_phase_2_ticket_form_load_projects() {
	$form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  $form = form_get_cache($form_build_id, $form_state);
  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form['#post'] = $_POST;
  $form['#redirect'] = $form['#programmed'] = FALSE;
  $form_state['post'] = $_POST;
  drupal_process_form($form_id, $form, $form_state);
  
  if ($form_state['values']['project_list_type'] == 'my-projects') {
  	$form_state['values']['project_list_type'] = 'all-projects';
  } else {
  	$form_state['values']['project_list_type'] = 'my-projects';
  }
  
  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);
  $form_part = $form['project_number_wrapper'];
  unset($form_part['#prefix'], $form_part['#suffix']);
  theme('status_messages'); // make them go away
	return drupal_json(array('status' => TRUE, 'data' => drupal_render($form_part)));
}

function fg_phase_2_ticket_form_validate($form, &$form_state) {
	if ($form_state['values']['problem_category']['other']) {
		if (empty($form_state['values']['problem_category_other'])) {
			form_set_error('problem_category_other', t('Please provide a description for "Other".'));
		}
	}
}

function fg_phase_2_ticket_form_submit($form, &$form_state) {
	global $user;
	
	$theme_args = array('fg_ticket_email_body');
	
	if ($user->uid) {
		profile_load_profile($user);
		$theme_args[] = $user->profile_firstname;
		$theme_args[] = $user->profile_lastname;
		$theme_args[] = $user->name;
		$theme_args[] = $user->mail;
		$sender = $user->mail;
	} else {
		$theme_args[] = $form_state['values']['first_name'];
		$theme_args[] = $form_state['values']['last_name'];
		$theme_args[] = t('Not provided');
		$theme_args[] = $form_state['values']['email'];
		$sender = $form_state['values']['email'];
	}

	$subj = $form_state['values']['subject'];
	$theme_args[] = $subj;
	if ($form_state['values']['project_number']) {
		$theme_args[] = node_load($form_state['values']['project_number']);
	} else {
		$theme_args[] = NULL;
	}
	
	$categories = array();
	foreach ($form_state['values']['problem_category'] as $cat => $checked) {
		if ($checked) {
			if ($cat == 'other') {
				$categories[] = $form['problem_category_wrapper']['problem_category']['#options'][$cat] . ' (' . $form_state['values']['problem_category_other'] . ')';
			} else {
				$categories[] = $form['problem_category_wrapper']['problem_category']['#options'][$cat];
			}
		}
	}
	
	$theme_args[] = $categories;
	$theme_args[] = $form_state['values']['summary'];
	
	$attach = array();
	if (
		isset($_FILES['files']) &&
		$_FILES['files']['name']['attachment'] &&
		is_uploaded_file($_FILES['files']['tmp_name']['attachment'])
	) {
		$attach[] = array(
			'filename' => $_FILES['files']['name']['attachment'],
			'filepath' => $_FILES['files']['tmp_name']['attachment'],
			'filemime' => file_get_mimetype($_FILES['files']['name']['attachment'])
			);
		
		$theme_args[] = $attach[0]['filename'];
	}
	
	$body = call_user_func_array('theme', $theme_args);
	
	$recipient = variable_get('fg_phase_2_tickets_email', 'help@tickets.futuregrid.org');
	
	$encoded = mimemail(
		$sender,
		$recipient,
		$subj,
		$body,
		TRUE,
		array(),
		drupal_html_to_text($body),
		$attach
		);
	
	drupal_set_message(t('Your ticket has been submitted.  You should expect a response to your issue shortly.  If no response is received within 72 hours, please email !email.', array('!email' => l(variable_get('fg_phase_2_tickets_email', 'help@tickets.futuregrid.org'), 'mailto:'.variable_get('fg_phase_2_tickets_email', 'help@tickets.futuregrid.org')))));
	$_SESSION['fg_ticket_submission'] = $body;
	$form_state['redirect'] = 'fg/tickets/submit/result';
}

function fg_phase_2_ticket_form_submit_result() {
	if ($submission = $_SESSION['fg_ticket_submission']) {
		unset($_SESSION['fg_ticket_submission']);
		return $submission . '<p>' . l(t('Back to My tickets'), 'fg/tickets') . '</p>';
	} else {
		drupal_goto('fg/tickets/submit');
	}
}

function fg_phase_2_ticket_admin_form() {
	$form = array();
	
	$form['fg_phase_2_tickets_email'] = array(
		'#type' => 'textfield',
		'#title' => t('Tickets recipient email'),
		'#default_value' => variable_get('fg_phase_2_tickets_email','help@tickets.futuregrid.org'),
		'#element_validate' => array('fg_phase_2_ticket_admin_email_validate'),
		'#description' =>
			t('The email address that should receive ticket submissions from the !ticket_form.',
					array('!ticket_form' => l(t('Ticket Submission Form'), 'fg/tickets/submit', array('attributes' => array('target' => '_blank'))))
				),
		);
	
	return system_settings_form($form);
}

function fg_phase_2_ticket_admin_email_validate($element, &$form_state) {
	if (empty($element['#value'])) {
		form_error($element, t('An email address is required.'));
	} else if (!valid_email_address($element['#value'])) {
		form_error($element, t('Please provide a valid email address.'));
	}
}

function fg_phase_2_manage_account_access($account) {
	global $user;
	return $account->uid == $user->uid || user_access('manage portal accounts');
}

function fg_phase_2_manage_account($account) {
	global $user;
	if ($user->uid == $account->uid) {
		drupal_set_title(t('My Portal Account'));
	} else {
		drupal_set_title(t("@account's Portal Account", array("@account" => $account->profile_firstname .' '. $account->profile_lastname)));
	}
	return theme('fg_account', $account);
}

function fg_phase_2_manage_account_redirect_access() {
	global $user;
	return $user->uid;
}

function fg_phase_2_manage_account_redirect() {
	global $user;
	drupal_goto("user/$user->uid/fg-account");
}

function fg_phase_2_preprocess_fg_account(&$vars) {
	global $user;
	$account = $vars['account'];
	
	drupal_add_css(drupal_get_path('module', 'fg_phase_2') . '/css/fg_account.css');
	
	$own = $user->uid == $account->uid;
	$name = $account->profile_firstname . ' ' . $account->profile_lastname;
	
	$profile->title = $own ? t('My profile info') : t("@account's profile info", array("@account" => $name));
	$profile->content = views_embed_view('user_profile_block', 'default', $account->uid);
	
	$account_status->title = $own ? "My FutureGrid HPC account status" : t("@account's FutureGrid HPC Account Status", array("@account" => $name));
	$account_status->content = views_embed_view('accounts_status', 'default', $account->uid);
	$account_status->content .= t("<b>Note:</b> Once your FG resource account is created, you can !ssh-key-link directly through the portal and the change will be <b>effective immediately</b>.", array('!ssh-key-link' => l(t("modify (add, revoke, etc.) your ssh keys"), "user/$account->uid/ssh-keys")));
	
	if ($own) {
		$items = array();
		$items[] = l(t('Submit a ticket'), "fg/tickets/submit");
		$items[] = l(t('My tickets'), "fg/tickets/my");
		$items[] = l(t('Go to my account'), "user/$account->uid");
		$items[] = l(t('Edit my account information'), "user/$account->uid/edit");
		$items[] = l(t('Change password'), "user/$account->uid/edit", array('fragment' => 'edit-pass-wrapper'));
		$items[] = l(t('Edit my contact information'), "user/$account->uid/edit/Contact");
		$items[] = t('!link (FG Experts are required to fill this out. It is optional for all others.)', array('!link' => l(t('Edit my expertise information'), "user/$account->uid/edit/Other%20Information")));
		$items[] = l(t('Upload a portrait'), "user/$account->uid/edit", array('fragment' => 'edit-picture-upload-wrapper'));
		$items[] = l(t('Bookmarks'), "user/$account->uid/bookmarks");
		$items[] = l(t('Messages'), "user/$account->uid/messages");
		$items[] = l(t('Edit my OpenID information'), "user/$account->uid/openid");
		$items[] = t("!link. After uploading your key(s), you can !apply.", array("!link" => l(t('Edit my SSH keys'), "user/$account->uid/ssh-keys"), '!apply' => l(t('apply for an HPC account'), "request-hpc-account")));
		$items[] = l(t('Edit my forum and FAQ subscriptions'), "user/$account->uid/subscriptions/taxa");
		$links->title = t("Useful links");
		$links->content = theme('item_list', $items);
	}
	
	$my_projects->title = $own ? t("My projects") : t("@account's Projects", array("@account" => $name));
	$my_projects->content = views_embed_view('projects_my', 'default', $account->uid);
	$managed_projects->title = $own ? t("Projects I'm managing") : t("Projects @account is managing", array("@account" => $name));
	$managed_projects->content = views_embed_view('projects_my_manager', 'default', $account->uid);
	$member_projects->title = $own ? t("Projects I'm a member of") : t("Projects @account is a member of", array("@account" => $name));
	$member_projects->content = views_embed_view('projects_my_member', 'default', $account->uid);
	$expert_projects->title = $own ? t("Projects I'm supporting as an expert") : t("Projects @account is supporting as an expert", array("@account" => $name));
	$expert_projects->content = views_embed_view('projects_my_help', 'default', $account->uid);
	$manual_pages->title = $own ? t("Manual pages that I am responsible for updating") : t("Manual pages @account is responsible for", array("@account" => $name));
	$manual_pages->content = views_embed_view('list_my_book_pages', 'default', $account->uid);
	$community_pages->title = $own ? t("Community pages that I contributed") : t("Community Pages contributed by @account", array("@account" => $name));
	$community_pages->content = views_embed_view('list_contrib_page_by_user', 'default', $account->uid);
	
	$query = "select cid from biblio_contributor_data where drupal_uid = %d";
	$r = db_query($query, $account->uid);
	while($item = db_fetch_object($r)){
		$cid = $item->cid;
	}
	$publications->title = $own ? t("My publications") : t("@account's Publications", array("@account" => $name));
	$publications->content = views_embed_view('biblio_views', 'page_5', $cid);
	
	$vars += array(
		'profile' => $profile,
		'account_status' => $account_status,
		'links' => $links,
		'my_projects' => $my_projects,
		'managed_projects' => $managed_projects,
		'member_projects' => $member_projects,
		'expert_projects' => $expert_projects,
		'manual_pages' => $manual_pages,
		'community_pages' => $community_pages,
		'publications' => $publications,
	);
}

function fg_phase_2_theme() {
	$themeFuns = array(
		'fg_my_tickets' => array(
			'arguments' => array('tickets' => array()),
			'template' => 'templates/fg_my_tickets',
		),
		'fg_ticket_view' => array(
			'arguments' => array('ticket' => NULL, 'history_table' => NULL),
			'template' => 'templates/fg_ticket_view',
		),
		'fg_ticket_email_body' => array(
			'arguments' => array(
				'user_first_name' => NULL,
				'user_last_name' => NULL,
				'user_portal_name' => NULL,
				'user_email' => NULL,
				'subject' => NULL,
				'project' => NULL,
				'categories' => array(),
				'summary' => NULL,
				'attachment' => NULL,
				),
			'template' => 'templates/fg_ticket_email_body'
		),
		'fg_ticket_form' => array(
			'arguments' => array('form' => NULL),
		),
		'fg_account' => array(
			'arguments' => array('account' => NULL),
			'template' => 'templates/fg_account',
		),
		'fg_projects_service_join_request_form' => array(
			'arguments' => array('form' => NULL),
		),
	);
	
	module_load_include('inc','fg_phase_2','fg_phase_2.inca');
	$themeFuns = array_merge($themeFuns, fg_phase_2_inca_theme());
	
	return $themeFuns;
}

function fg_phase_2_views_api() {
  return array('api' => 2.0);
}

function fg_phase_2_fg_projects_admin($node) {
	$node->project_admin_view = TRUE;
	return node_view($node, 0, 1);
}

function fg_phase_2_fg_projects_admin_access($node) {
	if ($node->type == 'fg_projects') {
		return user_access('access content');
	}
	return FALSE;
}

function fg_phase_2_fg_projects_join_form(&$form_state, $node) {
	global $user;
	
	$form = array();
	
	$form['nid'] = array(
		'#type' => 'hidden',
		'#value' => $node->nid,
	);
	
	$form['uid'] = array(
		'#type' => 'hidden',
		'#value' => $user->uid,
	);
		
	$form['message'] = array(
		'#title' => t('Message to Project Lead/Manager'),
		'#type' => 'textarea',
		'#description' => t('Optional. Let the Project Lead/Manager know why you want to join the project and/or what contributions you can bring.'),
		'#wysiwyg' => FALSE,
	);
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Send join request'),
	);
	
	$form['cancel'] = array(
		'#type' => 'submit',
		'#value' => t('Cancel'),
	);
	
	return $form;
}

function fg_phase_2_fg_projects_join_form_submit($form, &$form_state) {
	$node = node_load($form_state['values']['nid']);
	if ($form_state['values']['op'] != t('Cancel')) {
		$request = array(
			'rid' => NULL,
			'nid' => $node->nid,
			'uid' => $form_state['values']['uid'],
			'message' => $form_state['values']['message'],
			'request_timestamp' => date('Y-m-d H:i:s O'),
		);
		drupal_write_record('fg_project_join_requests', $request);
		$user = user_load($request['uid']);
		profile_load_profile($user);
		$to = $user->profile_firstname .' '. $user->profile_lastname .'<'. $user->mail .'>';
		$from = variable_get('site_name', '') .'<'.variable_get('site_mail', '').'>';
		drupal_mail('fg_phase_2', 'fg_request_notify_user', $to, user_preferred_language($user), array('project' => $node, 'request' => (object) $request), $from);
		if ($node->field_project_join_notification[0]['value']) {
			$lead = user_load($node->field_project_lead[0]['uid']);
			profile_load_profile($lead);
			$manager = user_load($node->field_project_manager[0]['uid']);
			profile_load_profile($manager);
			$addresses = array();
			$addresses[] = $lead->profile_firstname .' '. $lead->profile_lastname .'<'. $lead->mail .'>';
			$addresses[] = $manager->profile_firstname .' '. $manager->profile_lastname .'<'. $manager->mail .'>';
			$to = implode(',', $addresses);
			drupal_mail('fg_phase_2', 'fg_request_notify_project', $to, user_preferred_language($user), array('project' => $node, 'request' => (object) $request), $from);
		}
		
		drupal_set_message(t('Your join request for the project "@project" has been submitted.', array('@project' => $node->title)));
	}
	$form_state['redirect'] = "projects/" . $node->field_projectid[0]['value'];
}

function fg_phase_2_fg_projects_join_access($node) {
	global $user;
	if ($user->uid && $node->type == 'fg_projects') {
		
		/**
		 * check that user isn't already a member of the project
		 */
		foreach ($node->field_project_members as $mem) {
			if ($user->uid == $mem['uid']) {
				return FALSE;
			}
		}
		
		/**
		 * check that user isn't project lead/manager
		 */
		if (
			$user->uid == $node->field_project_lead[0]['uid'] ||
			$user->uid == $node->field_project_manager[0]['uid']
		) {
			return FALSE;
		}
		
		/**
		 * check for existing *unserviced* join request
		 */
		$request = NULL;
		$sql = "SELECT rid, nid, uid, request_timestamp, status, service_timestamp, service_uid FROM {fg_project_join_requests} WHERE nid = %d AND uid = %d AND status = -1";
		$results = db_query($sql, array($node->nid, $user->uid));
		if (db_result($results)) {
			return FALSE;
		}
		
		return $node->field_project_public[0]['value'];
	}
	return FALSE;
}

function fg_phase_2_fg_projects_join_title($node) {
	return t('Request to Join @project', array('@project' => $node->title));
}

function fg_phase_2_fg_projects_service_join_request_form(&$form_state, $node) {
	$form = array();
	
	$form['nid'] = array(
		'#type' => 'hidden',
		'#value' => $node->nid,
	);
	
	$form['requests'] = array(
		'#tree' => TRUE,
	);
	$sql = "SELECT rid, nid, uid, message, request_timestamp, status, service_timestamp, service_uid FROM {fg_project_join_requests} WHERE nid = %d AND status = -1";
	$results = db_query($sql, array($node->nid));
	
	while ($r = db_fetch_object($results)) {
		$request['#request'] = $r;
		$user = user_load($r->uid);
		$request['#user'] = $user;
		$request['approve'] = array(
			'#type' => 'checkbox',
			'#title' => t('Approve @user', array('@user' => $user->name)),
		);
		$request['deny'] = array(
			'#type' => 'checkbox',
			'#title' => t('Deny @user', array('@user' => $user->name)),
		);
		$request['uid'] = array(
			'#type' => 'hidden',
			'#value' => $r->uid,
		);
		$request['rid'] = array(
			'#type' => 'hidden',
			'#value' => $r->rid,
		);
		$request['message'] = array(
			'#type' => 'markup',
			'#value' => $r->message,
		);
		
		$form['requests'][] = $request;
	}
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Submit'),
	);
	
	$form['#theme'][] = 'fg_projects_service_join_request_form';
	
	return $form;
}

function fg_phase_2_fg_projects_service_join_request_form_submit($form, &$form_state) {
	global $user;

	$project_node = node_load($form_state['values']['nid']);
	if ($form_state['values']['requests']) {
		foreach ($form_state['values']['requests'] as $key => $req) {
			if ($req['approve'] || $req['deny']) {
				$request = $form['requests'][$key]['#request'];
				if ($req['approve']) {
					// update request
					$request->status = 1;
					$request->service_timestamp = date('Y-m-d H:i:s O');
					$request->service_uid = $user->uid;
					drupal_write_record('fg_project_join_requests', $request, array('rid'));
	
					// add member
					$project_node->field_project_members[] = array('uid' => $request->uid);
					node_save($project_node);
					
					$account = user_load($request->uid);
					profile_load_profile($account);
					$to = $account->profile_firstname .' '. $account->profile_lastname .'<'. $account->mail .'>';
					$from = variable_get('site_name', '') .'<'.variable_get('site_mail', '').'>';
					drupal_mail('fg_phase_2', 'fg_request_notify_approve', $to, user_preferred_language($account), array('project' => $project_node, 'request' => $request), $from);
					
					drupal_set_message(t('Project join request APPROVED for: @user', array('@user' => theme('user_fullname', $request->uid, 0, 1))));
				} else {
					// update request
					$request->status = 0;
					$request->service_timestamp = date('Y-m-d H:i:s O');
					$request->service_uid = $user->uid;
					drupal_write_record('fg_project_join_requests', $request, array('rid'));
					
					$account = user_load($request->uid);
					profile_load_profile($account);
					$to = $account->profile_firstname .' '. $account->profile_lastname .'<'. $account->mail .'>';
					$from = variable_get('site_name', '') .'<'.variable_get('site_mail', '').'>';
					drupal_mail('fg_phase_2', 'fg_request_notify_deny', $to, user_preferred_language($account), array('project' => $project_node, 'request' => $request), $from);
	
					drupal_set_message(t('Project join request DENIED for: @user', array('@user' => theme('user_fullname', $request->uid, 0, 1))));
				}
			}
		}
	}
}

function fg_phase_2_fg_projects_service_join_request_access($node) {
	global $user;
	if ($node->type == 'fg_projects') {
		return
			$user->uid == $node->field_project_lead[0]['uid'] ||
			$user->uid == $node->field_project_manager[0]['uid'] ||
			user_access('service project join requests');
	}
	return FALSE;
}

function theme_fg_projects_service_join_request_form($form) {
	drupal_add_js(drupal_get_path('module', 'fg_phase_2').'/js/fg_project_request_form.js');

	$rows = array();
	foreach (element_children($form['requests']) as $key) {
		$account = $form['requests'][$key]['#user'];
		$request = $form['requests'][$key]['#request'];
		profile_load_profile($account);
		unset($form['requests'][$key]['approve']['#title']);

		$row = array();
		$row[] = drupal_render($form['requests'][$key]['approve']) . drupal_render($form['requests'][$key]['rid']) . drupal_render($form['requests'][$key]['uid']);
		$row[] = drupal_render($form['requests'][$key]['deny']);
		$row[] = theme('user_fullname', $account, 0, 1);
		$row[] = $account->mail;
		$row[] = $account->profile_institution_name;
		$row[] = $account->profile_institution_address .'<br>'. $account->profile_institution_country;
		$row[] = drupal_render($form['requests'][$key]['message']);
		$row[] = $request->request_timestamp;
		$rows[] = $row;
	}
	
	if ($rows) {
		
		$row = array();
		$row[] = '<label><input id="edit-requests-all-approve" type="checkbox" /><strong>All</strong></label>';
		$row[] = '<label><input id="edit-requests-all-deny" type="checkbox" /><strong>All</strong></label>';
		$row += array_fill(2, 6, '');
		array_unshift($rows, $row);
		
		$header = array(t('Approve'), t('Deny'), t('Name'), t('Email'), t('Institution'), t('Address'), t('Message from requestee'), t('Request date'));
		$output = '<p>'.t('Below are the currently pending project join requests.  Select to approve/deny each request.').'</p>';
		$output .= theme('table', $header, $rows);
	} else {
		$output = '<p>'.t('There are no pending project join requests.').'</p>';
	}
	$output .= drupal_render($form);
	return $output;
}

function fg_phase_2_mail($key, &$message, $params) {
	switch($key) {
	case 'fg_request_notify_project':
		$project = $params['project'];
		$request = $params['request'];
		
		$message['subject'] = t('New project join request received for "@project"', array('@project' => $project->title));
		$body = "Dear Project Lead/Manager,\n\n";
		$body .= "A new project join request has been received from @user for the project @project.  ";
		$body .= "Please visit the FutureGrid Portal to service this request.\n\n";
		if ($request->message) {
			$body .= "Message from user:\n@message\n\n";
		}
		$body .= "Portal URL: !portal_link\n";
		$body .= "Project URL: !project_link\n";
		$body .= "Direct link to service request: !service_link";
		$message['body'] = t($body, array(
			'@project' => $project->title,
			'@user' => theme('user_fullname', $request->uid, 0, 1),
			'@message' => $request->message,
			'!portal_link' => url('<front>', array('absolute' => TRUE)),
			'!project_link' => url("node/$project->nid", array('absolute' => TRUE)),
			'!service_link' => url("node/$project->nid/join-requests", array('absolute' => TRUE)),
		));
		break;
	case 'fg_request_notify_user':
		$project = $params['project'];

		$message['subject'] = t('Your recent project join request for "@project"', array('@project' => $project->title));
		$body = "Dear User,\n\n";
		$body .= "This is confirmation that your recent project join request has been received for the project @project.\n\n";
		$body .= "Portal URL: !portal_link\n";
		$body .= "Project URL: !project_link";
		$message['body'] = t($body, array(
			'@project' => $project->title,
			'!portal_link' => url('<front>', array('absolute' => TRUE)),
			'!project_link' => url("node/$project->nid", array('absolute' => TRUE)),
		));
		break;
	case 'fg_request_notify_approve':
		$project = $params['project'];
		
		$message['subject'] = t('Project join request approved for "@project"', array('@project' => $project->title));
		$body = "Dear User,\n\n";
		$body .= "Good news!  Your project join request for the project @project has been approved.\n\n";
		$body .= "Portal URL: !portal_link\n";
		$body .= "Project URL: !project_link";
		$message['body'] = t($body, array(
			'@project' => $project->title,
			'!portal_link' => url('<front>', array('absolute' => TRUE)),
			'!project_link' => url("node/$project->nid", array('absolute' => TRUE)),
		));
		break;
	case 'fg_request_notify_deny':
		$project = $params['project'];
		
		$message['subject'] = t('Project join request denied for "@project"', array('@project' => $project->title));
		$body = "Dear User,\n\n";
		$body .= "We regret to inform you that your project join request for the project @project has been denied.  ";
		$body .= "If you still wish to join this project, you may want to follow up with the project lead/manager to determine ";
		$body .= "why the request was denied.  You may also submit a subsequent join request if you feel this was in error.\n\n";
		$body .= "Portal URL: !portal_link\n";
		$body .= "Project URL: !project_link";
		$message['body'] = t($body, array(
			'@project' => $project->title,
			'!portal_link' => url('<front>', array('absolute' => TRUE)),
			'!project_link' => url("node/$project->nid", array('absolute' => TRUE)),
		));
		break;
	}
}
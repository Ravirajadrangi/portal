<?php
/**
 * Author: Matthew R Hanlon (mrhanlon), TACC
 */
 
function fg_phase_2_init() {
	if (module_exists('homebox')) {
		module_load_include('inc', 'fg_phase_2', 'fg_phase_2.homebox');
	}
	module_load_include('inc', 'fg_phase_2', 'fg_phase_2.inca');
}

function fg_phase_2_perm() {
	return array(
		'manage portal accounts',
		'service project join requests',
		);
}

function fg_phase_2_menu() {
	$items = array();

 	$items['user/%user/fg-account'] = array(
 		'access callback' => 'fg_phase_2_manage_account_access',
 		'access arguments' => array(1),
 		'page callback' => 'fg_phase_2_manage_account',
 		'page arguments' => array(1),
 		'title' => 'Portal Account',
		'type' => MENU_LOCAL_TASK,
		'weight' => -10,
 		);

 	$items['manage-my-portal-account'] = array(
 		'access callback' => 'fg_phase_2_manage_account_redirect_access',
 		'page callback' => 'fg_phase_2_manage_account_redirect',
 		'title' => 'Portal Account',
 		);
 	
 	$items['fg/inca/test/%/%'] = array(
 		'page callback' => 'fg_phase_2_get_inca_test',
 		'page arguments' => array(3,4),
 		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
 		);
 	
 	$items['node/%node/project-details'] = array(
 		'title' => 'Project Detail',
 		'page callback' => 'fg_phase_2_fg_projects_admin',
 		'page arguments' => array(1),
 		'access callback' => 'fg_phase_2_fg_projects_admin_access',
 		'access arguments' => array(1),
 		'type' => MENU_LOCAL_TASK,
 		'weight' => 20,
 	);
 	
 	$items['node/%node/join-project'] = array(
 		'title callback' => 'fg_phase_2_fg_projects_join_title',
 		'title arguments' => array(1),
 		'page callback' => 'drupal_get_form',
 		'page arguments' => array('fg_phase_2_fg_projects_join_form', 1),
 		'access callback' => 'fg_phase_2_fg_projects_join_access',
 		'access arguments' => array(1),
 		'type' => MENU_CALLBACK,
 	);
 	
 	$items['node/%node/join-requests'] = array(
 		'title' => 'Project Join Requests',
 		'page callback' => 'drupal_get_form',
 		'page arguments' => array('fg_phase_2_fg_projects_service_join_request_form', 1),
 		'access callback' => 'fg_phase_2_fg_projects_service_join_request_access',
 		'access arguments' => array(1),
 		'type' => MENU_LOCAL_TASK,
 		'weight' => 21,
 	);
 	
 	$items['admin/user/approve'] = array(
 		'title' => 'Approve portal users',
 		'description' => t('Lists user accounts pending approval on the Portal.  Allows administrators to approve users en masse.'),
 		'page callback' => 'drupal_get_form',
 		'page arguments' => array('fg_phase_2_admin_approve_users_form'),
 		'access arguments' => array('administer users'),
 		'type' => MENU_NORMAL_ITEM,
 	);

	$items['ajax/xml-callback'] = array(
		'access callback' => TRUE,
		'page callback' => '_fg_ajax_callback',
		'page arguments' => array($cluster, $node),
		'type' => MENU_CALLBACK,
	);
	
	return $items;
}

function fg_phase_2_menu_alter(&$items) {
	$items['user/%user/view']['weight'] = -20;
}

function fg_phase_2_block($op = 'list', $delta = 0, $options = array()) {
	switch ($op) {
		case 'list':
			$blocks = array();
			$blocks[] = array('info' => 'INCA status');
			$blocks[] = array('info' => 'INCA dashboard help');
			$blocks[] = array('info' => 'Ganglia');
			return $blocks;
		
		case 'view':
			switch ($delta) {
				case 0:
					module_load_include('inc', 'fg_phase_2','fg_phase_2.blocks');
					return fg_phase_2_inca_status_block($options);
				case 1:
					module_load_include('inc', 'fg_phase_2', 'fg_phase_2.blocks');
					return fg_phase_2_inca_help_block();
				case 2:
					module_load_include('inc', 'fg_phase_2','fg_phase_2.blocks');
					return fg_phase_2_ganglia_block($options);
			}
	}
}

function fg_phase_2_user($op, &$edit, &$account, $category = NULL) {
	if ($op == 'validate') {
		if ($category == 'account') {
			// only check changes; allow existing usernames even if they violate new rules (FG-1342)
			if (isset($edit['name']) && $edit['name'] != $account->name) {
				if (_fg_phase_2_validate_username($edit['name'])) {
					if (! _fg_phase_2_validate_username_ldap($edit['name'])) {
						form_set_error('name', t('The username <em>@name</em> is already taken.', array('@name' => $edit['name'])));
					}
				} else {
					form_set_error('name', t('The username provided is invalid.  Usernames must be between 3 and 10 characters in length and may contain only lowercase letters (a-z), numbers (0-9), hyphens (-) and underscores (_).'));
				}
			}
		}
	}
}

function fg_phase_2_form_alter(&$form, &$form_state, $form_id) {
	if ($form_id == 'user_register') {
		$form['account']['name']['#description'] = t('Usernames must be between 3 and 10 characters in length and may contain only lowercase letters (a-z), numbers (0-9), and hyphens (-), and should begin with a letter.');
		$form['account']['name']['#element_validate'][] = 'fg_phase_2_user_register_name_validate';
		$form['account']['mail']['#element_validate'][] = 'fg_phase_2_user_register_email_validate';
	}
	else if ($form_id == 'user_profile_form') {
		if ($form['_category']['#value'] == 'Sign up code') {
			$form['Sign up code']['profile_signup_code']['#attributes']['disabled']='disabled';
			$form['Sign up code']['profile_signup_code']['#value'] = $form['Sign up code']['profile_signup_code']['#default_value'];
			$form['Sign up code']['profile_signup_code_msg'] = array(
				'#value' => '<div class="messages info">'.t('This code can only be provided at registration.').'</div>',
			);
			unset($form['submit'],$form['delete']);
		}
		else if ($form['_category']['#value'] == 'account') {
			$form['account']['name']['#description'] = t('Usernames must be between 3 and 10 characters in length and may contain only lowercase letters (a-z), numbers (0-9), hyphens (-) and underscores (_).');
		}
	}
}

function fg_phase_2_profile_alter(&$account) {
	// don't show this
	unset($account->content['Sign up code']);
}

function fg_phase_2_user_register_name_validate($element, &$form_state) {
	$provided = $form_state['values']['name'];
	if (_fg_phase_2_validate_username($provided)) {
		// check if user exists in LDAP
		if (! _fg_phase_2_validate_username_ldap($provided)) {
			form_error($element, t('The username <em>@name</em> is already taken.', array('@name' => $provided)));
		}
	} else {
		form_error($element, t('The username provided is invalid.  Usernames must be between 3 and 10 characters in length and may contain only lowercase letters (a-z), numbers (0-9), and hyphens (-), and should begin with a letter.'));
	}
}

function _fg_phase_2_validate_username($name) {
	if (preg_match('/^[a-z][a-z0-9\-]{2,9}$/', $name)) {
		return TRUE;
	}
	return FALSE;
}

function _fg_phase_2_validate_username_ldap($name) {
	if (function_exists('fg_ldap_user_exists')) {
		if (fg_ldap_user_exists($name)) {
			return FALSE;
		}
	}
	return TRUE;
}

function fg_phase_2_user_register_email_validate($element, &$form_state) {
	if ($form_state['values']['mail'] &&
			$form_state['values']['profile_email'] &&
			$form_state['values']['mail'] != $form_state['values']['profile_email']
		)
	{
		form_error($element, t('The emails provided do not match.  Please check your entry.'));
		form_set_error('profile_email', ' ');
		array_pop($_SESSION['messages']['error']); // get rid of empty error
	}
}

function fg_phase_2_manage_account_access($account) {
	global $user;
	return $account->uid == $user->uid || user_access('manage portal accounts');
}

function fg_phase_2_manage_account($account) {
	global $user;
	if ($user->uid == $account->uid) {
		drupal_set_title(t('My Portal Account'));
	} else {
		drupal_set_title(t("@account's Portal Account", array("@account" => $account->profile_firstname .' '. $account->profile_lastname)));
	}
	return theme('fg_account', $account);
}

function fg_phase_2_manage_account_redirect_access() {
	global $user;
	return $user->uid;
}

function fg_phase_2_manage_account_redirect() {
	global $user;
	drupal_goto("user/$user->uid/fg-account");
}

function fg_phase_2_preprocess_fg_account(&$vars) {
	global $user;
	$account = $vars['account'];
	
	drupal_add_css(drupal_get_path('module', 'fg_phase_2') . '/css/fg_account.css');
	
	$own = $user->uid == $account->uid;
	$name = $account->profile_firstname . ' ' . $account->profile_lastname;
	
	$profile->title = $own ? t('My profile info') : t("@account's profile info", array("@account" => $name));
	$profile->content = views_embed_view('user_profile_block', 'default', $account->uid);
	
	$account_status->title = $own ? "My FutureGrid HPC account status" : t("@account's FutureGrid HPC Account Status", array("@account" => $name));
	$account_status->content = views_embed_view('accounts_status', 'default', $account->uid);
	$account_status->content .= t("<b>Note:</b> Once your FG resource account is created, you can !ssh-key-link directly through the portal but please be reminded that the change may take up to <b>several hours</b> to propagate to all the FG systems.", array('!ssh-key-link' => l(t("modify (add, revoke, etc.) your ssh keys"), "user/$account->uid/ssh-keys")));
	
	if ($own) {
		$items = array();
		$items[] = l(t('Submit a ticket'), "fg/tickets/submit");
		$items[] = l(t('My tickets'), "fg/tickets/my");
		$items[] = l(t('Go to my account'), "user/$account->uid");
		$items[] = l(t('Edit my account information'), "user/$account->uid/edit");
		$items[] = l(t('Change password'), "user/$account->uid/edit", array('fragment' => 'edit-pass-wrapper'));
		$items[] = l(t('Edit my contact information'), "user/$account->uid/edit/Contact");
		$items[] = t('!link (FG Experts are required to fill this out. It is optional for all others.)', array('!link' => l(t('Edit my expertise information'), "user/$account->uid/edit/Other%20Information")));
		$items[] = l(t('Upload a portrait'), "user/$account->uid/edit", array('fragment' => 'edit-picture-upload-wrapper'));
		$items[] = l(t('Bookmarks'), "user/$account->uid/bookmarks");
		$items[] = l(t('Messages'), "user/$account->uid/messages");
		$items[] = l(t('Edit my OpenID information'), "user/$account->uid/openid");
		$items[] = l(t('Edit my SSH keys'), "user/$account->uid/ssh-keys");
		$items[] = l(t('Edit my forum and FAQ subscriptions'), "user/$account->uid/subscriptions/taxa");
		$links->title = t("Useful links");
		$links->content = theme('item_list', $items);
	}
	
	$view = views_get_view('projects_my');
	$output = $view->preview('default', array($account->uid));
	if ($view->result) {
		$my_projects->title = $own ? t("My projects") : t("@account's Projects", array("@account" => $name));
		$my_projects->content = $output;
	}
	
	$view = views_get_view('projects_my_manager');
	$output = $view->preview('default', array($account->uid));
	if ($view->result) {
		$managed_projects->title = $own ? t("Projects I'm managing") : t("Projects @account is managing", array("@account" => $name));
		$managed_projects->content = $output;
	}

	$view = views_get_view('projects_my_member');
	$output = $view->preview('default', array($account->uid));
	if ($view->result) {
		$member_projects->title = $own ? t("Projects I'm a member of") : t("Projects @account is a member of", array("@account" => $name));
		$member_projects->content = $output;
	}

	$view = views_get_view('projects_my_help');
	$output = $view->preview('default', array($account->uid));
	if ($view->result) {
		$expert_projects->title = $own ? t("Projects I'm supporting as an expert") : t("Projects @account is supporting as an expert", array("@account" => $name));
		$expert_projects->content = $output;
	}

	$manual_pages->title = $own ? t("Manual pages that I am responsible for updating") : t("Manual pages @account is responsible for", array("@account" => $name));
	$manual_pages->content = views_embed_view('list_my_book_pages', 'default', $account->uid);
	$community_pages->title = $own ? t("Community pages that I contributed") : t("Community Pages contributed by @account", array("@account" => $name));
	$community_pages->content = views_embed_view('list_contrib_page_by_user', 'default', $account->uid);
	
	$query = "select cid from biblio_contributor_data where drupal_uid = %d";
	$r = db_query($query, $account->uid);
	while($item = db_fetch_object($r)){
		$cid = $item->cid;
	}
	$publications->title = $own ? t("My publications") : t("@account's Publications", array("@account" => $name));
	$publications->content = views_embed_view('biblio_views', 'page_5', $cid);
	
	$vars += array(
		'profile' => $profile,
		'account_status' => $account_status,
		'links' => $links,
		'my_projects' => $my_projects,
		'managed_projects' => $managed_projects,
		'member_projects' => $member_projects,
		'expert_projects' => $expert_projects,
		'manual_pages' => $manual_pages,
		'community_pages' => $community_pages,
		'publications' => $publications,
	);
}

function fg_phase_2_theme() {
	$themeFuns = array(
		'fg_account' => array(
			'arguments' => array('account' => NULL),
			'template' => 'templates/fg_account',
		),
		'fg_projects_service_join_request_form' => array(
			'arguments' => array('form' => NULL),
		),
		'fg_phase_2_admin_approve_users_form' => array(
			'arguments' => array('form' => NULL),
		),
	);
	
	module_load_include('inc','fg_phase_2','fg_phase_2.inca');
	$themeFuns = array_merge($themeFuns, fg_phase_2_inca_theme());
	
	return $themeFuns;
}

function fg_phase_2_views_api() {
  return array('api' => 2.0);
}

function fg_phase_2_fg_projects_admin($node) {
	$node->project_admin_view = TRUE;
	return node_view($node, 0, 1);
}

function fg_phase_2_fg_projects_admin_access($node) {
	if ($node->type == 'fg_projects') {
		return user_access('access content');
	}
	return FALSE;
}

function fg_phase_2_fg_projects_is_member($node) {
	global $user;

	if ($node->type == 'fg_projects') {
		$is_lead = $user->uid == $node->field_project_lead[0]['uid'];
		$is_manager = $user->uid == $node->field_project_manager[0]['uid'];
		$is_member = FALSE;
		foreach ($node->field_project_members as $member) {
			if ($user->uid == $member['uid']) {
				$is_member = TRUE;
				break;
			}
		}
		$is_expert = FALSE;
		foreach ($node->field_project_expert as $expert) {
			if ($user->uid == $expert['uid']) {
				$is_expert = TRUE;
				break;
			}
		}
		return $is_lead || $is_manager || $is_member || $is_expert;
	}
	return FALSE;
}

function fg_phase_2_fg_projects_join_form(&$form_state, $node) {
	global $user;
	
	$form = array();
	
	$form['nid'] = array(
		'#type' => 'hidden',
		'#value' => $node->nid,
	);
	
	$form['uid'] = array(
		'#type' => 'hidden',
		'#value' => $user->uid,
	);
		
	$form['message'] = array(
		'#title' => t('Message to Project Lead/Manager'),
		'#type' => 'textarea',
		'#description' => t('Optional. Let the Project Lead/Manager know why you want to join the project and/or what contributions you can bring.'),
		'#wysiwyg' => FALSE,
	);
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Send join request'),
	);
	
	$form['cancel'] = array(
		'#type' => 'submit',
		'#value' => t('Cancel'),
	);
	
	return $form;
}

function fg_phase_2_fg_projects_join_form_submit($form, &$form_state) {
	$node = node_load($form_state['values']['nid']);
	if ($form_state['values']['op'] != t('Cancel')) {
		$request = array(
			'rid' => NULL,
			'nid' => $node->nid,
			'uid' => $form_state['values']['uid'],
			'message' => $form_state['values']['message'],
			'request_timestamp' => date('Y-m-d H:i:s O'),
		);
		drupal_write_record('fg_project_join_requests', $request);
		$user = user_load($request['uid']);
		profile_load_profile($user);
		$to = $user->profile_firstname .' '. $user->profile_lastname .'<'. $user->mail .'>';
		$from = variable_get('site_name', '') .'<'.variable_get('site_mail', '').'>';
		drupal_mail('fg_phase_2', 'fg_request_notify_user', $to, user_preferred_language($user), array('project' => $node, 'request' => (object) $request), $from);
		if ($node->field_project_join_notification[0]['value']) {
			$lead = user_load($node->field_project_lead[0]['uid']);
			profile_load_profile($lead);
			$manager = user_load($node->field_project_manager[0]['uid']);
			profile_load_profile($manager);
			$addresses = array();
			$addresses[] = $lead->profile_firstname .' '. $lead->profile_lastname .'<'. $lead->mail .'>';
			$addresses[] = $manager->profile_firstname .' '. $manager->profile_lastname .'<'. $manager->mail .'>';
			$to = implode(',', $addresses);
			drupal_mail('fg_phase_2', 'fg_request_notify_project', $to, user_preferred_language($user), array('project' => $node, 'request' => (object) $request), $from);
		}
		
		drupal_set_message(t('Your join request for the project "@project" has been submitted.', array('@project' => $node->title)));
	}
	$form_state['redirect'] = "projects/" . $node->field_projectid[0]['value'];
}

function fg_phase_2_fg_projects_join_access($node) {
	global $user;
	if ($user->uid && $node->type == 'fg_projects') {
		
		/**
		 * check that user isn't already a member of the project
		 */
		if ($node->field_project_members) {
			foreach ($node->field_project_members as $mem) {
				if ($user->uid == $mem['uid']) {
					return FALSE;
				}
			}
		}
		
		/**
		 * check that user isn't project lead/manager
		 */
		if (
			$user->uid == $node->field_project_lead[0]['uid'] ||
			$user->uid == $node->field_project_manager[0]['uid']
		) {
			return FALSE;
		}
		
		/**
		 * check for existing *unserviced* join request
		 */
		$request = NULL;
		$sql = "SELECT rid, nid, uid, request_timestamp, status, service_timestamp, service_uid FROM {fg_project_join_requests} WHERE nid = %d AND uid = %d AND status = -1";
		$results = db_query($sql, array($node->nid, $user->uid));
		if (db_result($results)) {
			return FALSE;
		}
		
		return $node->field_project_public[0]['value'];
	}
	return FALSE;
}

function fg_phase_2_fg_projects_join_title($node) {
	return t('Request to Join @project', array('@project' => $node->title));
}

function fg_phase_2_fg_projects_service_join_request_form(&$form_state, $node) {
	$form = array();
	
	$form['nid'] = array(
		'#type' => 'hidden',
		'#value' => $node->nid,
	);
	
	$form['requests'] = array(
		'#tree' => TRUE,
	);
	$sql = "SELECT rid, nid, uid, message, request_timestamp, status, service_timestamp, service_uid FROM {fg_project_join_requests} WHERE nid = %d AND status = -1";
	$results = db_query($sql, array($node->nid));
	
	while ($r = db_fetch_object($results)) {
		$request['#request'] = $r;
		$user = user_load($r->uid);
		$request['#user'] = $user;
		$request['approve'] = array(
			'#type' => 'checkbox',
			'#title' => t('Approve @user', array('@user' => $user->name)),
		);
		$request['deny'] = array(
			'#type' => 'checkbox',
			'#title' => t('Deny @user', array('@user' => $user->name)),
		);
		$request['uid'] = array(
			'#type' => 'hidden',
			'#value' => $r->uid,
		);
		$request['rid'] = array(
			'#type' => 'hidden',
			'#value' => $r->rid,
		);
		$request['message'] = array(
			'#type' => 'markup',
			'#value' => $r->message,
		);
		
		$form['requests'][] = $request;
	}
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Submit'),
	);
	
	$form['#theme'][] = 'fg_projects_service_join_request_form';
	
	return $form;
}

function fg_phase_2_fg_projects_service_join_request_form_submit($form, &$form_state) {
	global $user;

	$project_node = node_load($form_state['values']['nid']);
	if ($form_state['values']['requests']) {
		foreach ($form_state['values']['requests'] as $key => $req) {
			if ($req['approve'] || $req['deny']) {
				$request = $form['requests'][$key]['#request'];
				if ($req['approve']) {
					// update request
					$request->status = 1;
					$request->service_timestamp = date('Y-m-d H:i:s O');
					$request->service_uid = $user->uid;
					drupal_write_record('fg_project_join_requests', $request, array('rid'));
	
					// add member
					$project_node->field_project_members[] = array('uid' => $request->uid);
					node_save($project_node);
					
					$account = user_load($request->uid);
					profile_load_profile($account);
					$to = $account->profile_firstname .' '. $account->profile_lastname .'<'. $account->mail .'>';
					$from = variable_get('site_name', '') .'<'.variable_get('site_mail', '').'>';
					drupal_mail('fg_phase_2', 'fg_request_notify_approve', $to, user_preferred_language($account), array('project' => $project_node, 'request' => $request), $from);
					
					drupal_set_message(t('Project join request APPROVED for: @user', array('@user' => theme('user_fullname', $request->uid, 0, 1))));
				} else {
					// update request
					$request->status = 0;
					$request->service_timestamp = date('Y-m-d H:i:s O');
					$request->service_uid = $user->uid;
					drupal_write_record('fg_project_join_requests', $request, array('rid'));
					
					$account = user_load($request->uid);
					profile_load_profile($account);
					$to = $account->profile_firstname .' '. $account->profile_lastname .'<'. $account->mail .'>';
					$from = variable_get('site_name', '') .'<'.variable_get('site_mail', '').'>';
					drupal_mail('fg_phase_2', 'fg_request_notify_deny', $to, user_preferred_language($account), array('project' => $project_node, 'request' => $request), $from);
	
					drupal_set_message(t('Project join request DENIED for: @user', array('@user' => theme('user_fullname', $request->uid, 0, 1))));
				}
			}
		}
	}
}

function fg_phase_2_fg_projects_service_join_request_access($node) {
	global $user;
	if ($node->type == 'fg_projects') {
		return
			$user->uid == $node->field_project_lead[0]['uid'] ||
			$user->uid == $node->field_project_manager[0]['uid'] ||
			user_access('service project join requests');
	}
	return FALSE;
}

function theme_fg_projects_service_join_request_form($form) {
	drupal_add_js(drupal_get_path('module', 'fg_phase_2').'/js/fg_project_request_form.js');

	$rows = array();
	foreach (element_children($form['requests']) as $key) {
		$account = $form['requests'][$key]['#user'];
		$request = $form['requests'][$key]['#request'];
		profile_load_profile($account);
		unset($form['requests'][$key]['approve']['#title']);
		unset($form['requests'][$key]['deny']['#title']);

		$row = array();
		$row[] = drupal_render($form['requests'][$key]['approve']) . drupal_render($form['requests'][$key]['rid']) . drupal_render($form['requests'][$key]['uid']);
		$row[] = drupal_render($form['requests'][$key]['deny']);
		$row[] = theme('user_fullname', $account, 0, 1);
		$row[] = $account->mail;
		$row[] = $account->profile_institution_name;
		$row[] = $account->profile_institution_address .'<br>'. $account->profile_institution_country;
		$row[] = drupal_render($form['requests'][$key]['message']);
		$row[] = $request->request_timestamp;
		$rows[] = $row;
	}
	
	if ($rows) {
		
		$row = array();
		$row[] = '<label><input id="edit-requests-all-approve" type="checkbox" /><strong>All</strong></label>';
		$row[] = '<label><input id="edit-requests-all-deny" type="checkbox" /><strong>All</strong></label>';
		$row += array_fill(2, 6, '');
		array_unshift($rows, $row);
		
		$header = array(t('Approve'), t('Deny'), t('Name'), t('Email'), t('Institution'), t('Address'), t('Message from requestee'), t('Request date'));
		$output = '<p>'.t('Below are the currently pending project join requests.  Select to approve/deny each request.').'</p>';
		$output .= theme('table', $header, $rows);
	} else {
		$output = '<p>'.t('There are no pending project join requests.').'</p>';
	}
	$output .= drupal_render($form);
	return $output;
}

function fg_phase_2_mail($key, &$message, $params) {
	switch($key) {
	case 'fg_request_notify_project':
		$project = $params['project'];
		$request = $params['request'];
		
		$message['subject'] = t('New project join request received for "@project"', array('@project' => $project->title));
		$body = "Dear Project Lead/Manager,\n\n";
		$body .= "A new project join request has been received from @user for the project @project.  ";
		$body .= "Please visit the FutureGrid Portal to service this request.\n\n";
		if ($request->message) {
			$body .= "Message from user:\n@message\n\n";
		}
		$body .= "Portal URL: !portal_link\n";
		$body .= "Project URL: !project_link\n";
		$body .= "Direct link to service request: !service_link";
		$message['body'] = t($body, array(
			'@project' => $project->title,
			'@user' => theme('user_fullname', $request->uid, 0, 1),
			'@message' => $request->message,
			'!portal_link' => url('<front>', array('absolute' => TRUE)),
			'!project_link' => url("node/$project->nid", array('absolute' => TRUE)),
			'!service_link' => url("node/$project->nid/join-requests", array('absolute' => TRUE)),
		));
		break;
	case 'fg_request_notify_user':
		$project = $params['project'];

		$message['subject'] = t('Your recent project join request for "@project"', array('@project' => $project->title));
		$body = "Dear User,\n\n";
		$body .= "This is confirmation that your recent project join request has been received for the project @project.\n\n";
		$body .= "Portal URL: !portal_link\n";
		$body .= "Project URL: !project_link";
		$message['body'] = t($body, array(
			'@project' => $project->title,
			'!portal_link' => url('<front>', array('absolute' => TRUE)),
			'!project_link' => url("node/$project->nid", array('absolute' => TRUE)),
		));
		break;
	case 'fg_request_notify_approve':
		$project = $params['project'];
		
		$message['subject'] = t('Project join request approved for "@project"', array('@project' => $project->title));
		$body = "Dear User,\n\n";
		$body .= "Good news!  Your project join request for the project @project has been approved.\n\n";
		$body .= "Portal URL: !portal_link\n";
		$body .= "Project URL: !project_link";
		$message['body'] = t($body, array(
			'@project' => $project->title,
			'!portal_link' => url('<front>', array('absolute' => TRUE)),
			'!project_link' => url("node/$project->nid", array('absolute' => TRUE)),
		));
		break;
	case 'fg_request_notify_deny':
		$project = $params['project'];
		
		$message['subject'] = t('Project join request denied for "@project"', array('@project' => $project->title));
		$body = "Dear User,\n\n";
		$body .= "We regret to inform you that your project join request for the project @project has been denied.  ";
		$body .= "If you still wish to join this project, you may want to follow up with the project lead/manager to determine ";
		$body .= "why the request was denied.  You may also submit a subsequent join request if you feel this was in error.\n\n";
		$body .= "Portal URL: !portal_link\n";
		$body .= "Project URL: !project_link";
		$message['body'] = t($body, array(
			'@project' => $project->title,
			'!portal_link' => url('<front>', array('absolute' => TRUE)),
			'!project_link' => url("node/$project->nid", array('absolute' => TRUE)),
		));
		break;
	}
}

function fg_phase_2_admin_approve_users_form(&$form_state) {

	$sql = "SELECT u.uid FROM {users} u INNER JOIN {users_roles} ur ON u.uid = ur.uid INNER JOIN {role} r ON r.rid = ur.rid WHERE r.name = '%s'";
	$r = db_query($sql, 'guest');
	
	$users_to_approve = array();
	while ($uid = db_result($r)) {
		$user = user_load($uid);
		$users_to_approve[] = $user;
	}
	
	$form = array();
	$form['users'] = array(
		'#tree' => TRUE,
	);
	
	foreach ($users_to_approve as $i => $user) {
		$form['users'][$i]['#user'] = $user;
		$form['users'][$i]['approve'] = array(
			'#type' => 'checkbox',
			'#title' => 'Approve ' . $user->name,
		);
		$form['users'][$i]['uid'] = array(
			'#type' => 'hidden',
			'#value' => $user->uid,
		);
	}
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Submit'),
	);
	
	return $form;
}

function fg_phase_2_admin_approve_users_form_submit($form, &$form_state) {
	$roles = user_roles();
	$guest_rid = 0;
	foreach ($roles as $rid => $role) {
		if ($role == 'guest') {
			$guest_rid = $rid;
		}
	}
	
	if ($guest_rid) {
		foreach ($form_state['values']['users'] as $approval) {
			if ($approval['approve']) {
				// approve user
				$user = user_load($approval['uid']);
				$roles = $user->roles;
				unset($roles[$guest_rid]);
				user_save($user, array('roles' => $roles));
			}
		}
	} else {
		drupal_set_message(t('Error! Could not load guest role!'));
	}
}

function theme_fg_phase_2_admin_approve_users_form($form) {
	
	drupal_add_js(libraries_get_path('datatables').'/media/js/jquery.dataTables.js');
	drupal_add_css(libraries_get_path('datatables').'/media/css/demo_table_jui.css');
	drupal_add_js(drupal_get_path('module', 'fg_phase_2') .'/js/fg_approve_users.js');
	drupal_add_css(drupal_get_path('module', 'fg_phase_2') .'/css/fg_approve_users.css');
	
	$users = element_children($form['users']);
	if ($users) {
		$rows = array();
		foreach ($users as $key) {
			$user = $form['users'][$key]['#user'];
			profile_load_profile($user);
			
			$results = db_query(
				"select fgp.field_projectid_value, n.title, n.nid from {node} n " .
				"join {content_type_fg_projects} fgp on fgp.nid = n.nid " .
				"where n.type = 'fg_projects' and n.uid = %d",
				array($user->uid)
			);
			$projectsSubmitted = array();
			while ($proj = db_fetch_object($results)) {
				$truncate = strlen($proj->title) > 24;
				if ($truncate) {
					$title = truncate_utf8($proj->title, 21) . '...';
				} else {
					$title = $proj->title;
				}
				$projectsSubmitted[] = l($proj->proj_num .': ' . $title, "node/".$proj->nid);
			}
			if (count($projectsSubmitted) == 0) {
				$projectsSubmitted[] = t('N/A');
			}
			
			$results = db_query(
				"select fgp.field_projectid_value as proj_num, n.title, n.nid from {node} n " .
				"join {content_type_fg_projects} fgp on fgp.nid = n.nid " .
				"join {content_field_project_members} fgpm on fgpm.nid = n.nid " .
				"where n.type = 'fg_projects' and fgpm.field_project_members_uid = %d",
				array($user->uid)
			);
			$projectsJoined = array();
			while ($proj = db_fetch_object($results)) {
				$truncate = strlen($proj->title) > 24;
				if ($truncate) {
					$title = truncate_utf8($proj->title, 21) . '...';
				} else {
					$title = $proj->title;
				}
				$projectsJoined[] = l($proj->proj_num .': ' . $title, "node/".$proj->nid);
			}
			if (count($projectsJoined) == 0) {
				$projectsJoined[] = t('N/A');
			}
			
			$row = array();
			unset($form['users'][$key]['approve']['#title']);
			$row[] = drupal_render($form['users'][$key]['approve']) . drupal_render($form['users'][$key]['uid']);
			$row[] = l($user->name, "user/$user->uid", array('attributes' => array('target' => '_blank')));
			$row[] = $user->profile_firstname;
			$row[] = $user->profile_lastname;
			$row[] = $user->mail;
			$row[] = $user->profile_institution_name . '<br/>' . $user->profile_institution_country;
			$row[] = theme('item_list', $projectsSubmitted);
			$row[] = theme('item_list', $projectsJoined);
			$row[] = $user->profile_signup_code;
			$rows[] = $row;
		}
		$headers = array(
			'Approve',
			'Portal<br/>username',
			'First<br/>name',
			'Last<br/>name',
			'Email',
			'Institution/<br/>Country',
			'Projects<br/>Submitted',
			'Projects<br/>Joined',
			'Sign up<br/>code'
		);
		$output = '<p>'.t('Users pending approval are listed below.  Select only the users you wish to approve and click "Submit".  All unchecked users will remain in the "Guest" state.').'</p>';
		$output .= theme('table', $headers, $rows, array('class' => 'fg-approve-users-table'));
		$output .= drupal_render($form);
	} else {
		$output = '<p>' . t('There are currently no users pending approval.') . '</p>';
	}
	return $output;
}

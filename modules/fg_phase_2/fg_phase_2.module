<?php
// $Id$

/**
 * Author: Matthew R Hanlon (mrhanlon), TACC
 *
 */
function fg_phase_2_perm() {
	return array(
		'view own tickets',
		'submit tickets',
		'administer fg tickets',
		);
}

function fg_phase_2_menu() {
	$items = array();
	
	$items['fg/tickets'] = array(
		'title' => 'FutureGrid tickets',
		'page callback' => 'fg_phase_2_tickets',
		'access arguments' => array('view own tickets'),
		'type' => MENU_NORMAL_ITEM,
		);
		
	$items['fg/tickets/my'] = array(
		'title' => 'My tickets',
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'access arguments' => array('view own tickets'),
		);
	
	$items['fg/tickets/submit'] = array(
		'title' => 'Submit a ticket',
		'type' => MENU_LOCAL_TASK,
		'access arguments' => array('submit tickets'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('fg_phase_2_ticket_form'),
		);
	
	$items['fg/tickets/submit/result'] = array(
		'title' => 'Your ticket submission',
		'type' => MENU_CALLBACK,
		'access arguments' => array('submit tickets'),
		'page callback' => 'fg_phase_2_ticket_form_submit_result',
		);

 	$items['admin/settings/fg-tickets'] = array(
 		'access arguments' => array('administer fg tickets'),
 		'page callback' => 'drupal_get_form',
 		'page arguments' => array('fg_phase_2_ticket_admin_form'),
 		'title' => 'FutureGrid tickets',
 		'description' => t('Administer FutureGrid tickets settings.'),
 		);
	
	return $items;
}

function fg_phase_2_tickets() {
	global $user;
	
	jquery_ui_add(array('ui.core','ui.accordion'));
	drupal_add_css(libraries_get_path('jquery_ui_smoothness').'/jquery-ui-1.7.3.custom.css');
	drupal_add_js(drupal_get_path('module','fg_phase_2').'/js/fg_tickets.js');
	drupal_add_css(drupal_get_path('module','fg_phase_2').'/css/fg_tickets.css');
	
	$tix = fg_rt_get_tickets_by_requestor($user->mail);
	return theme('fg_my_tickets', $tix);
}

function fg_phase_2_ticket_form(&$form_state) {
	drupal_add_css(drupal_get_path('module', 'fg_phase_2').'/css/fg_tickets.css');
	
	$form = array();
	$form['subject'] = array(
		'#type' => 'textfield',
		'#title' => t('Subject'),
		'#description' => t('The nature of your ticket'),
		'#required' => TRUE,
		);
	
	$project_options = array('' => t('Choose project'));
	$results = db_query("SELECT node.nid, node.title, content_type_fg_projects.field_projectid_value FROM {node} JOIN {content_type_fg_projects} ON node.nid = content_type_fg_projects.nid");
	while ($r = db_fetch_object($results)) {
		$project_options[$r->nid] = $r->field_projectid_value . ' - ' . $r->title;
	}

	$form['project_number'] = array(
		'#type' => 'select',
		'#options' => $project_options,
		'#title' => t('Project'),
		'#description' =>
			t('Please select the project that this ticket pertains to.  You can find your projects on the !myprojects page or all projects on the !allprojects page.',
				array(
					'!myprojects' => l(t('My Portal Account'), 'manage-my-portal-account', array('attributes' => array('target'=>'_blank'))),
					'!allprojects' => l(t('Projects'), 'projects', array('attributes'=>array('target'=>'_blank'))),
				)),
		'#attributes' => array('class'=>'project-number-field'),
		'#required' => TRUE,
		);
	
	$form['problem_category_wrapper'] = array(
		'#prefix' => '<div class="problem-category-wrapper">',
		'#suffix' => '</div>',
		);
		
	$form['problem_category_wrapper']['problem_category'] = array(
		'#type' => 'checkboxes',
		'#title' => t('Problem category'),
		'#description' => t('Please indicate a category for this issue.'),
		'#options' => array(
			'eucalyptus' => t('Eucalyptus'),
			'nimbus' => t('Nimbus'),
			'hpc' => t('HPC'),
			'ssh-keys' => t('SSH keys'),
			'portal' => t('Portal'),
			'portal-account' => t('Portal account'),
			'unicore' => t('Unicore'),
			'genesis-ii' => t('Genesis II'),
			'network' => t('Network'),
			'other' => t('Other'),
			),
		'#required' => TRUE,
		'#prefix' => '<div class="problem-category">',
		'#suffix' => '</div>',
		);
	
	$form['problem_category_wrapper']['problem_category_other'] = array(
		'#type' => 'textfield',
		'#title' => t('Other'),
		'#description' => t('If you selected "Other", please describe it here.'),
		'#prefix' => '<div class="problem-category-other">',
		'#suffix' => '</div>',
		);
	
	$form['summary'] = array(
		'#type' => 'textarea',
		'#title' => t('Summary'),
		'#description' => t('Provide a summary of your problem or issue'),
		'#rows' => 10,
		'#required' => TRUE,
		);
	
	$form['#attributes'] = array('enctype' => "multipart/form-data");
	$form['attachment'] = array(
		'#type' => 'file',
		'#title' => t('Attach a file to this ticket'),
		'#description' => t('Attach a file to the ticket, such as sample code or a test case to reproduce the problem or a screen shot.'),
		);
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Submit ticket'),
		);
	
	return $form;
}

function fg_phase_2_ticket_form_validate($form, &$form_state) {
	if ($form_state['values']['problem_category']['other']) {
		if (empty($form_state['values']['problem_category_other'])) {
			form_set_error('problem_category_other', t('Please provide a description for "Other".'));
		}
	}
}

function fg_phase_2_ticket_form_submit($form, &$form_state) {
	global $user;
	
	$sender = variable_get('site_mail', ini_get('sendmail_from'));
	$recipient = variable_get('fg_phase_2_tickets_email', 'help@tickets.futuregrid.org');
	$subj = $form_state['values']['subject'];
	
	$theme_args = array('fg_ticket_body');
	
	profile_load_profile($user);
	$theme_args[] = $user->profile_firstname;
	$theme_args[] = $user->profile_lastname;
	$theme_args[] = $user->name;
	$theme_args[] = $user->mail;
	
	$theme_args[] = $subj;
	$theme_args[] = node_load($form_state['values']['project_number']);
	
	$categories = array();
	foreach ($form_state['values']['problem_category'] as $cat => $checked) {
		if ($checked) {
			if ($cat == 'other') {
				$categories[] = $form['problem_category_wrapper']['problem_category']['#options'][$cat] . ' (' . $form_state['values']['problem_category_other'] . ')';
			} else {
				$categories[] = $form['problem_category_wrapper']['problem_category']['#options'][$cat];
			}
		}
	}
	
	$theme_args[] = $categories;
	$theme_args[] = $form_state['values']['summary'];
	
	$attach = array();
	if (
		isset($_FILES['files']) &&
		$_FILES['files']['name']['attachment'] &&
		is_uploaded_file($_FILES['files']['tmp_name']['attachment'])
	) {
		$attach[] = array(
			'filename' => $_FILES['files']['name']['attachment'],
			'filepath' => $_FILES['files']['tmp_name']['attachment'],
			'filemime' => file_get_mimetype($_FILES['files']['name']['attachment'])
			);
		
		$theme_args[] = $attach[0]['filename'];
	}
	
	$body = call_user_func_array('theme', $theme_args);
	
	$encoded = mimemail(
		$sender,
		$recipient,
		$subj,
		$body,
		TRUE,
		array(),
		drupal_html_to_text($body),
		$attach
		);
	
	drupal_set_message(t('Your ticket has been submitted.  You should expect a response to your issue shortly.  If no response is received within 72 hours, please email !email.', array('!email' => l(variable_get('fg_phase_2_tickets_email', 'help@tickets.futuregrid.org'), 'mailto:'.variable_get('fg_phase_2_tickets_email', 'help@tickets.futuregrid.org')))));
	$_SESSION['fg_ticket_submission'] = $body;
	$form_state['redirect'] = 'fg/tickets/submit/result';
}

function fg_phase_2_ticket_form_submit_result() {
	if ($submission = $_SESSION['fg_ticket_submission']) {
		unset($_SESSION['fg_ticket_submission']);
		return $submission . '<p>' . l(t('Back to My tickets'), 'fg/tickets') . '</p>';
	} else {
		drupal_goto('fg/tickets/submit');
	}
}

function fg_phase_2_ticket_admin_form() {
	$form = array();
	
	$form['fg_phase_2_tickets_email'] = array(
		'#type' => 'textfield',
		'#title' => t('Tickets recipient email'),
		'#default_value' => variable_get('fg_phase_2_tickets_email','help@tickets.futuregrid.org'),
		'#element_validate' => array('fg_phase_2_ticket_admin_email_validate'),
		'#description' =>
			t('The email address that should receive ticket submissions from the !ticket_form.',
					array('!ticket_form' => l(t('Ticket Submission Form'), 'fg/tickets/submit', array('attributes' => array('target' => '_blank'))))
				),
		);
	
	return system_settings_form($form);
}

function fg_phase_2_ticket_admin_email_validate($element, &$form_state) {
	if (empty($element['#value'])) {
		form_error($element, t('An email address is required.'));
	} else if (!valid_email_address($element['#value'])) {
		form_error($element, t('Please provide a valid email address.'));
	}
}

function fg_phase_2_theme() {
	return array(
		'fg_my_tickets' => array(
			'arguments' => array('tickets' => array()),
			'template' => 'templates/fg_my_tickets',
			),
		'fg_ticket_body' => array(
			'arguments' => array(
				'user_first_name' => NULL,
				'user_last_name' => NULL,
				'user_portal_name' => NULL,
				'user_email' => NULL,
				'subject' => NULL,
				'project' => NULL,
				'categories' => array(),
				'summary' => NULL,
				'attachment' => NULL,
				),
			'template' => 'templates/fg_ticket_body'
			),
		);
}

function fg_phase_2_views_api() {
  return array('api' => 2.0);
}